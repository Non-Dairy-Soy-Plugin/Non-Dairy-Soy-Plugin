/* The following code was generated by JFlex 1.4.3 on 2/09/15 10:10 AM */

/*
   Copyright 2010 - 2013 Ed Venaglia

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package net.venaglia.nondairy.soylang.lexer;

import static com.intellij.psi.xml.XmlTokenType.*;
import static net.venaglia.nondairy.soylang.lexer.SoyToken.*;

import java.util.regex.Matcher;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({ "ALL" })


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/09/15 10:10 AM from the specification file
 * <tt>/Users/egarcia/ExternalProjects/Non-Dairy-Soy-Plugin/src/net/venaglia/nondairy/soylang/lexer/soy.flex</tt>
 */
class SoyScanner extends BaseSoyScanner implements com.intellij.lexer.FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int HTML_COMMENT = 56;
  public static final int HTML_ATTRIBUTE_NAME_RESUME = 46;
  public static final int HTML_CDATA = 62;
  public static final int AFTER_WHITESPACE = 64;
  public static final int STRING_PARAM = 32;
  public static final int HTML_ATTRIBUTE_VALUE_2 = 54;
  public static final int HTML_ATTRIBUTE_VALUE_1 = 52;
  public static final int LITERAL_BLOCK = 8;
  public static final int HTML_TAG_START = 40;
  public static final int SOY_TAG = 6;
  public static final int HTML_DOCTYPE = 58;
  public static final int STRING_IN_SINGLE_BRACES = 34;
  public static final int TEMPLATE_TAG = 14;
  public static final int CLOSE_TAG = 4;
  public static final int STRING = 30;
  public static final int NAMESPACE_TAG = 12;
  public static final int HTML_INITIAL = 38;
  public static final int HTML_ATTRIBUTE_VALUE = 50;
  public static final int DOCS_BOL = 26;
  public static final int HTML_ATTRIBUTE_EQ = 48;
  public static final int DOCS_IDENT = 28;
  public static final int DELPACKAGE_TAG = 10;
  public static final int TAG_DIRECTIVE = 22;
  public static final int IDENTIFIER_TAG = 20;
  public static final int HTML_DIRECTIVE = 60;
  public static final int DOCS = 24;
  public static final int YYINITIAL = 0;
  public static final int OPEN_TAG = 2;
  public static final int LET_TAG = 18;
  public static final int HTML_ATTRIBUTE_NAME = 44;
  public static final int STRING_IN_DOUBLE_BRACES = 36;
  public static final int HTML_TAG_END = 42;
  public static final int DELTEMPLATE_TAG = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\1\0\1\3\1\1\22\0\1\6\1\70\1\23"+
    "\1\37\1\7\1\71\1\41\1\74\1\63\1\64\1\5\1\22\1\73"+
    "\1\33\1\11\1\4\1\14\1\76\1\75\1\102\1\77\1\13\1\103"+
    "\1\100\1\101\1\13\1\62\1\42\1\67\1\66\1\34\1\65\1\10"+
    "\1\113\1\117\1\106\1\104\1\112\1\16\2\36\1\121\2\36\1\120"+
    "\1\115\1\36\1\105\1\111\2\36\1\114\1\107\1\116\2\36\1\15"+
    "\1\110\1\36\1\61\1\17\1\35\1\0\1\12\1\0\1\31\1\60"+
    "\1\45\1\43\1\21\1\53\1\47\1\55\1\26\1\36\1\46\1\25"+
    "\1\51\1\50\1\56\1\44\1\36\1\30\1\52\1\27\1\20\1\36"+
    "\1\54\1\40\1\57\1\36\1\24\1\72\1\32\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\41\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\7\5\1\7\7\5\2\10\1\11\1\12\2\2\1\13"+
    "\1\14\1\12\1\15\1\16\2\17\1\20\1\21\1\22"+
    "\2\16\1\23\1\24\1\25\1\26\3\16\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\12\1\36\1\37"+
    "\1\40\1\21\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\42\1\46\1\47\2\50\1\42\1\51\1\44\2\52"+
    "\1\44\2\52\1\53\1\54\1\55\1\56\2\57\1\60"+
    "\1\56\1\61\2\62\1\60\2\61\1\60\1\61\2\63"+
    "\1\64\2\61\1\65\1\66\2\67\1\70\1\71\1\0"+
    "\1\72\1\73\1\74\1\75\1\76\2\73\1\77\2\100"+
    "\1\77\1\3\3\101\1\102\1\103\1\104\1\101\1\105"+
    "\1\3\1\106\1\3\1\107\2\110\1\111\2\112\1\113"+
    "\1\114\1\115\2\116\1\3\1\117\1\120\2\116\1\3"+
    "\1\121\1\0\1\101\1\122\1\101\1\3\1\123\1\124"+
    "\1\101\2\122\1\125\1\3\1\126\1\101\1\127\1\130"+
    "\1\3\1\0\2\131\2\1\1\132\1\0\2\133\1\3"+
    "\1\4\13\0\1\134\13\0\1\135\1\136\1\137\1\0"+
    "\1\140\1\141\1\0\1\142\4\0\2\16\1\143\1\0"+
    "\1\144\3\16\1\145\1\146\1\0\1\147\1\150\1\151"+
    "\1\152\1\153\5\0\1\154\1\0\1\51\1\0\1\155"+
    "\1\0\3\52\1\0\1\156\1\157\1\60\1\0\2\160"+
    "\1\161\1\162\1\163\1\162\1\164\1\165\1\166\1\167"+
    "\1\170\1\171\1\172\1\173\1\174\2\73\1\175\2\77"+
    "\1\0\2\176\1\3\3\0\1\177\1\200\2\0\1\201"+
    "\2\202\1\3\2\203\1\3\1\116\2\204\1\3\1\116"+
    "\2\205\1\3\3\0\1\206\2\207\1\3\1\0\2\122"+
    "\2\210\1\3\1\0\2\211\1\3\2\0\2\132\1\0"+
    "\1\212\1\213\1\214\1\215\1\216\3\0\1\217\1\220"+
    "\2\0\1\221\13\0\1\222\2\0\1\223\2\137\1\0"+
    "\1\224\1\225\2\226\1\0\1\16\1\227\1\0\1\16"+
    "\1\230\1\16\1\231\3\0\3\52\1\160\1\0\1\232"+
    "\2\0\1\233\3\0\1\234\3\0\1\102\1\235\1\236"+
    "\2\116\1\237\2\116\1\240\1\0\1\241\1\242\2\122"+
    "\1\243\1\0\1\244\1\245\2\0\1\246\14\0\1\247"+
    "\1\250\1\0\1\251\1\0\1\252\2\0\1\226\1\253"+
    "\1\254\1\0\1\255\1\16\2\0\1\254\1\255\1\52"+
    "\1\160\1\0\1\137\1\0\1\256\3\0\1\257\2\0"+
    "\1\116\1\137\1\116\1\137\2\122\1\260\13\0\1\261"+
    "\1\262\3\0\1\225\1\0\1\226\1\0\1\263\2\0"+
    "\1\263\1\160\5\0\2\137\2\122\4\0\1\264\4\0"+
    "\1\265\1\266\3\0\1\226\3\0\1\267\1\270\4\0"+
    "\1\271\1\272\1\273\10\0\1\274\1\0\1\226\3\0"+
    "\1\267\3\0\1\275\1\276\3\0\1\277\1\300\1\0"+
    "\1\301\1\226\6\0\1\302\3\0\1\226\4\0\1\303"+
    "\1\304\2\0\1\305\1\226\2\0\1\306\2\0\1\307"+
    "\1\310\1\311";

  private static int [] zzUnpackAction() {
    int [] result = new int[597];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e"+
    "\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee"+
    "\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e"+
    "\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc"+
    "\0\u0f0e\0\u0f60\0\u0fb2\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c"+
    "\0\u0c7e\0\u119e\0\u11f0\0\u0c7e\0\u1242\0\u0c7e\0\u1294\0\u0c7e"+
    "\0\u12e6\0\u0c7e\0\u1338\0\u138a\0\u13dc\0\u0c7e\0\u142e\0\u0c7e"+
    "\0\u1480\0\u14d2\0\u1524\0\u1576\0\u15c8\0\u0c7e\0\u161a\0\u166c"+
    "\0\u16be\0\u1710\0\u0c7e\0\u0c7e\0\u0c7e\0\u1762\0\u17b4\0\u1806"+
    "\0\u1858\0\u0c7e\0\u0c7e\0\u0c7e\0\u18aa\0\u18fc\0\u194e\0\u0c7e"+
    "\0\u19a0\0\u0c7e\0\u19f2\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c"+
    "\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26\0\u1576\0\u1d78\0\u1dca"+
    "\0\u0c7e\0\u0c7e\0\u0c7e\0\u1e1c\0\u1e6e\0\u0c7e\0\u1ec0\0\u1f12"+
    "\0\u0c7e\0\u1f64\0\u1fb6\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u20fe"+
    "\0\u2150\0\u0c7e\0\u21a2\0\u21f4\0\u2246\0\u2298\0\u22ea\0\u233c"+
    "\0\u0c7e\0\u238e\0\u0c7e\0\u23e0\0\u0c7e\0\u2432\0\u0c7e\0\u2484"+
    "\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2"+
    "\0\u0c7e\0\u2714\0\u2766\0\u27b8\0\u280a\0\u0c7e\0\u285c\0\u28ae"+
    "\0\u2900\0\u2952\0\u29a4\0\u0c7e\0\u0c7e\0\u2670\0\u0c7e\0\u0c7e"+
    "\0\u2670\0\u29f6\0\u0c7e\0\u0c7e\0\u2a48\0\u2a9a\0\u2aec\0\u0c7e"+
    "\0\u0c7e\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86\0\u2670\0\u2cd8"+
    "\0\u2d2a\0\u2d7c\0\u0c7e\0\u0c7e\0\u2dce\0\u2e20\0\u2e72\0\u0c7e"+
    "\0\u2ec4\0\u0c7e\0\u2f16\0\u0c7e\0\u2f68\0\u2fba\0\u300c\0\u0c7e"+
    "\0\u2008\0\u305e\0\u30b0\0\u3102\0\u3154\0\u0c7e\0\u31a6\0\u31f8"+
    "\0\u0c7e\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392\0\u33e4\0\u3436"+
    "\0\u3488\0\u34da\0\u352c\0\u357e\0\u0c7e\0\u35d0\0\u3622\0\u3674"+
    "\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e\0\u3860\0\u38b2\0\u3904"+
    "\0\u3956\0\u0c7e\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u0c7e"+
    "\0\u3b42\0\u3b94\0\u3be6\0\u3c38\0\u3c8a\0\u3cdc\0\u0c7e\0\u3d2e"+
    "\0\u0c7e\0\u3d80\0\u3dd2\0\u3e24\0\u1338\0\u0c7e\0\u3e76\0\u0c7e"+
    "\0\u0c7e\0\u0c7e\0\u0c7e\0\u0c7e\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe"+
    "\0\u4010\0\u4062\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc\0\u424e"+
    "\0\u42a0\0\u42f2\0\u1e1c\0\u0c7e\0\u0c7e\0\u4344\0\u4344\0\u4396"+
    "\0\u43e8\0\u443a\0\u0c7e\0\u0c7e\0\u448c\0\u0c7e\0\u0c7e\0\u0c7e"+
    "\0\u0c7e\0\u0c7e\0\u0c7e\0\u0c7e\0\u44de\0\u2484\0\u2484\0\u4530"+
    "\0\u2484\0\u4582\0\u45d4\0\u4626\0\u0c7e\0\u4678\0\u46ca\0\u471c"+
    "\0\u476e\0\u47c0\0\u0c7e\0\u0c7e\0\u4812\0\u4864\0\u0c7e\0\u0c7e"+
    "\0\u48b6\0\u4908\0\u0c7e\0\u495a\0\u49ac\0\u49fe\0\u0c7e\0\u4a50"+
    "\0\u4aa2\0\u4af4\0\u0c7e\0\u4b46\0\u4b98\0\u4bea\0\u4c3c\0\u2d2a"+
    "\0\u0c7e\0\u0c7e\0\u4c8e\0\u4ce0\0\u2dce\0\u4d32\0\u4d84\0\u0c7e"+
    "\0\u4dd6\0\u4e28\0\u4e7a\0\u0c7e\0\u4ecc\0\u4f1e\0\u4f70\0\u305e"+
    "\0\u4fc2\0\u0c7e\0\u5014\0\u5066\0\u0c7e\0\u0c7e\0\u0c7e\0\u0c7e"+
    "\0\u50b8\0\u510a\0\u515c\0\u0c7e\0\u0c7e\0\u51ae\0\u5200\0\u0c7e"+
    "\0\u5252\0\u52a4\0\u52f6\0\u5348\0\u539a\0\u53ec\0\u543e\0\u5490"+
    "\0\u54e2\0\u5534\0\u5586\0\u0c7e\0\u55d8\0\u562a\0\u0c7e\0\u567c"+
    "\0\u0c7e\0\u5066\0\u0c7e\0\u56ce\0\u5720\0\u3be6\0\u5772\0\u57c4"+
    "\0\u1338\0\u5816\0\u5868\0\u1338\0\u58ba\0\u0c7e\0\u590c\0\u595e"+
    "\0\u59b0\0\u5a02\0\u5a54\0\u5aa6\0\u5af8\0\u5b4a\0\u2484\0\u4582"+
    "\0\u5b9c\0\u0c7e\0\u5bee\0\u5c40\0\u5c92\0\u0c7e\0\u5ce4\0\u5d36"+
    "\0\u5d88\0\u5dda\0\u0c7e\0\u0c7e\0\u5e2c\0\u5e7e\0\u0c7e\0\u5ed0"+
    "\0\u5f22\0\u0c7e\0\u5f74\0\u0c7e\0\u0c7e\0\u5fc6\0\u6018\0\u0c7e"+
    "\0\u606a\0\u0c7e\0\u0c7e\0\u60bc\0\u610e\0\u0c7e\0\u6160\0\u61b2"+
    "\0\u6204\0\u6256\0\u62a8\0\u62fa\0\u634c\0\u639e\0\u63f0\0\u6442"+
    "\0\u6494\0\u64e6\0\u0c7e\0\u0c7e\0\u6538\0\u0c7e\0\u658a\0\u0c7e"+
    "\0\u65dc\0\u662e\0\u6680\0\u0c7e\0\u1338\0\u66d2\0\u1338\0\u6724"+
    "\0\u6776\0\u67c8\0\u1cd4\0\u1cd4\0\u681a\0\u686c\0\u68be\0\u5014"+
    "\0\u6910\0\u0c7e\0\u6962\0\u69b4\0\u6a06\0\u0c7e\0\u6a58\0\u6aaa"+
    "\0\u6afc\0\u5e2c\0\u6b4e\0\u5ed0\0\u6ba0\0\u6bf2\0\u0c7e\0\u6c44"+
    "\0\u6c96\0\u6ce8\0\u6d3a\0\u6d8c\0\u6dde\0\u6e30\0\u6e82\0\u6ed4"+
    "\0\u6f26\0\u6f78\0\u0c7e\0\u0c7e\0\u6fca\0\u701c\0\u706e\0\u70c0"+
    "\0\u70c0\0\u7112\0\u7164\0\u1338\0\u71b6\0\u7208\0\u1cd4\0\u725a"+
    "\0\u72ac\0\u72fe\0\u7350\0\u73a2\0\u73f4\0\u2a48\0\u2b3e\0\u7446"+
    "\0\u7498\0\u74ea\0\u753c\0\u758e\0\u75e0\0\u0c7e\0\u7632\0\u7684"+
    "\0\u76d6\0\u7728\0\u0c7e\0\u0c7e\0\u777a\0\u77cc\0\u781e\0\u7870"+
    "\0\u78c2\0\u7914\0\u7966\0\u79b8\0\u0c7e\0\u7a0a\0\u7a5c\0\u7aae"+
    "\0\u7b00\0\u2cd8\0\u2cd8\0\u0c7e\0\u7b52\0\u7ba4\0\u7bf6\0\u7c48"+
    "\0\u7c9a\0\u7cec\0\u7d3e\0\u7d90\0\u0c7e\0\u7de2\0\u7e34\0\u7e86"+
    "\0\u7ed8\0\u7f2a\0\u0c7e\0\u7f7c\0\u7fce\0\u8020\0\u0c7e\0\u0c7e"+
    "\0\u8072\0\u80c4\0\u8116\0\u0c7e\0\u0c7e\0\u8168\0\u0c7e\0\u81ba"+
    "\0\u820c\0\u825e\0\u82b0\0\u8302\0\u8354\0\u83a6\0\u0c7e\0\u83f8"+
    "\0\u844a\0\u849c\0\u84ee\0\u8540\0\u8592\0\u85e4\0\u8636\0\u0c7e"+
    "\0\u0c7e\0\u8688\0\u86da\0\u0c7e\0\u0c7e\0\u872c\0\u877e\0\u0c7e"+
    "\0\u87d0\0\u8822\0\u0c7e\0\u0c7e\0\u0c7e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[597];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\42\2\43\1\44\1\45\1\42\1\44\15\42\1\46"+
    "\5\42\1\47\67\42\2\50\1\0\1\50\1\51\12\50"+
    "\1\52\1\50\1\53\3\50\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\10\50\1\62\1\63\1\64\2\50\1\65"+
    "\1\66\1\67\1\70\46\50\1\71\3\43\1\72\1\71"+
    "\1\43\23\71\1\73\67\71\1\74\1\75\2\76\1\77"+
    "\1\100\1\76\1\101\1\74\1\102\1\103\1\104\1\105"+
    "\2\103\1\74\2\103\1\106\1\107\1\110\2\103\1\111"+
    "\1\103\1\112\1\113\1\114\1\115\1\116\1\103\1\74"+
    "\1\103\2\74\5\103\1\117\2\103\1\120\2\103\1\121"+
    "\2\103\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\7\104\16\103\24\136"+
    "\1\137\75\136\1\140\3\43\2\140\1\43\3\140\1\141"+
    "\2\140\2\141\1\140\2\141\3\140\5\141\1\142\3\140"+
    "\1\141\1\140\1\141\2\140\16\141\23\140\16\141\1\140"+
    "\3\43\2\140\1\43\3\140\1\143\2\140\2\143\1\140"+
    "\2\143\3\140\5\143\1\142\3\140\1\143\1\140\1\143"+
    "\2\140\16\143\23\140\16\143\1\140\3\43\2\140\1\43"+
    "\2\140\1\144\1\145\2\140\2\145\1\140\2\145\3\140"+
    "\5\145\1\142\3\140\1\145\1\140\1\145\2\140\16\145"+
    "\23\140\16\145\1\140\3\43\2\140\1\43\3\140\1\146"+
    "\2\140\2\146\1\140\2\146\3\140\5\146\1\142\3\140"+
    "\1\146\1\140\1\146\2\140\16\146\23\140\16\146\1\140"+
    "\3\43\2\140\1\43\1\147\2\140\1\150\2\140\2\150"+
    "\1\140\2\150\3\140\5\150\1\142\3\140\1\150\1\140"+
    "\1\150\2\140\16\150\23\140\16\150\1\140\3\43\2\140"+
    "\1\43\2\140\1\151\1\152\2\140\2\152\1\140\2\152"+
    "\3\140\5\152\1\142\3\140\1\152\1\140\1\152\2\140"+
    "\16\152\23\140\16\152\1\142\3\43\2\142\1\43\1\153"+
    "\2\142\1\154\1\104\1\105\2\154\1\142\2\154\1\142"+
    "\1\107\1\142\2\154\1\155\2\154\1\142\1\156\2\142"+
    "\1\154\1\142\1\154\2\142\5\154\1\157\2\154\1\160"+
    "\5\154\1\142\1\161\7\142\1\162\1\163\1\135\7\104"+
    "\16\154\1\164\1\165\1\166\1\167\1\164\1\170\1\167"+
    "\113\164\1\171\1\172\1\173\1\174\1\175\1\176\1\177"+
    "\1\171\1\200\112\171\1\201\1\202\1\203\1\171\1\204"+
    "\1\203\1\205\2\171\1\206\2\171\2\206\1\171\2\206"+
    "\3\171\5\206\4\171\1\206\1\171\1\206\2\171\16\206"+
    "\23\171\16\206\1\207\1\210\1\211\14\207\1\212\3\207"+
    "\1\213\50\207\1\213\25\207\7\0\1\214\13\0\1\215"+
    "\50\0\1\215\25\0\1\216\1\217\1\0\14\216\1\217"+
    "\3\216\1\217\1\220\5\216\1\221\41\216\1\217\25\216"+
    "\1\222\1\217\1\0\14\222\1\217\3\222\1\217\6\222"+
    "\1\223\41\222\1\217\25\222\1\224\2\225\1\226\1\227"+
    "\1\224\1\226\15\224\1\230\5\224\1\47\1\224\1\231"+
    "\4\224\1\232\25\224\1\233\32\224\2\231\1\0\7\231"+
    "\1\234\2\231\2\234\1\231\2\234\3\231\5\234\4\231"+
    "\1\234\1\231\1\234\2\231\16\234\23\231\16\234\1\231"+
    "\3\235\2\231\1\235\25\231\1\236\66\231\3\235\1\237"+
    "\1\231\1\235\3\231\1\240\2\231\2\240\1\231\2\240"+
    "\2\231\1\241\5\240\1\47\1\231\1\236\1\231\1\240"+
    "\1\231\1\240\2\231\16\240\23\231\16\240\1\231\3\235"+
    "\1\237\1\231\1\235\3\231\5\242\1\231\2\242\2\231"+
    "\1\243\5\242\1\47\1\242\1\236\1\231\1\242\1\231"+
    "\1\242\2\231\16\242\5\231\1\244\6\231\25\242\1\245"+
    "\3\235\1\246\1\245\1\235\57\245\1\247\33\245\1\250"+
    "\3\235\1\251\1\250\1\235\3\250\1\252\2\250\2\252"+
    "\1\250\2\252\1\250\1\253\1\250\5\252\4\250\1\252"+
    "\1\250\1\252\2\250\16\252\13\250\1\254\7\250\16\252"+
    "\4\255\1\256\17\255\1\257\5\255\1\47\1\255\1\260"+
    "\4\255\1\232\25\255\1\231\4\255\1\261\25\255\4\262"+
    "\1\263\16\262\1\261\1\264\5\262\1\47\1\262\1\260"+
    "\4\262\1\232\25\262\1\231\32\262\33\265\1\266\66\265"+
    "\1\231\3\235\1\267\1\231\1\235\3\231\1\270\2\231"+
    "\2\270\1\231\2\270\1\231\1\271\1\272\5\270\1\47"+
    "\1\231\1\273\1\231\1\270\1\231\1\270\2\231\16\270"+
    "\5\231\1\274\5\231\1\275\7\231\5\270\1\276\2\270"+
    "\1\277\5\270\1\231\3\235\1\267\1\231\1\235\3\231"+
    "\1\270\2\231\2\270\1\231\2\270\1\231\1\300\1\301"+
    "\5\270\1\47\1\231\1\302\1\231\1\270\1\231\1\270"+
    "\2\231\16\270\4\231\1\303\1\304\5\231\1\300\7\231"+
    "\16\270\24\305\1\306\5\305\1\47\2\305\1\307\64\305"+
    "\4\310\1\311\115\310\1\42\2\0\1\42\1\312\17\42"+
    "\1\0\5\42\1\0\67\42\1\0\3\43\2\0\1\43"+
    "\113\0\1\313\2\43\1\44\1\0\1\313\1\44\15\313"+
    "\1\0\5\313\1\0\67\313\4\0\1\314\1\315\114\0"+
    "\1\316\3\0\1\317\1\316\1\0\15\316\1\320\5\316"+
    "\1\0\67\316\32\0\1\321\240\0\1\322\1\323\17\0"+
    "\1\324\76\0\1\325\115\0\1\326\4\0\1\327\31\0"+
    "\1\330\114\0\1\331\67\0\1\332\160\0\1\333\66\0"+
    "\1\334\126\0\1\335\110\0\1\336\130\0\1\337\1\340"+
    "\121\0\1\341\20\0\1\342\75\0\1\343\2\0\1\344"+
    "\142\0\1\345\113\0\1\346\7\0\1\347\123\0\1\350"+
    "\75\0\1\351\121\0\1\352\71\0\1\76\123\0\1\353"+
    "\1\354\24\0\1\355\101\0\1\356\2\0\2\356\1\0"+
    "\2\356\3\0\5\356\4\0\1\356\1\0\1\356\2\0"+
    "\16\356\23\0\16\356\1\0\3\357\2\0\1\357\3\0"+
    "\5\103\1\0\2\103\3\0\5\103\4\0\1\103\1\0"+
    "\1\103\2\0\16\103\2\0\1\360\11\0\25\103\11\0"+
    "\1\361\1\0\2\104\60\0\7\104\27\0\1\361\1\0"+
    "\2\362\1\363\22\0\1\363\34\0\7\362\25\0\1\364"+
    "\113\0\3\357\2\0\1\357\3\0\5\103\1\0\2\103"+
    "\3\0\3\103\1\365\1\103\4\0\1\103\1\0\1\103"+
    "\2\0\16\103\2\0\1\360\11\0\25\103\1\0\3\357"+
    "\2\0\1\357\3\0\5\103\1\0\2\103\3\0\5\103"+
    "\4\0\1\103\1\0\1\103\2\0\5\103\1\366\10\103"+
    "\2\0\1\360\11\0\25\103\32\0\1\367\164\0\1\370"+
    "\112\0\1\371\34\0\3\357\2\0\1\357\3\0\5\103"+
    "\1\0\1\372\1\103\3\0\5\103\4\0\1\103\1\0"+
    "\1\103\2\0\13\103\1\373\2\103\2\0\1\360\11\0"+
    "\25\103\1\0\3\357\2\0\1\357\3\0\5\103\1\0"+
    "\2\103\3\0\4\103\1\374\4\0\1\103\1\0\1\103"+
    "\2\0\16\103\2\0\1\360\11\0\25\103\1\0\3\357"+
    "\2\0\1\357\3\0\5\103\1\0\2\103\3\0\3\103"+
    "\1\375\1\103\4\0\1\103\1\0\1\103\2\0\16\103"+
    "\2\0\1\360\11\0\25\103\35\0\1\376\24\0\1\377"+
    "\50\0\1\u0100\50\0\1\u0101\125\0\1\u0102\121\0\1\u0103"+
    "\121\0\1\u0104\42\0\1\u0105\112\0\24\136\1\u0106\101\136"+
    "\1\u0107\115\136\11\0\1\u0108\5\141\1\0\2\141\3\0"+
    "\5\141\4\0\1\141\1\0\1\141\2\0\16\141\14\0"+
    "\25\141\11\0\1\u0109\5\143\1\0\2\143\3\0\5\143"+
    "\4\0\1\143\1\0\1\143\2\0\16\143\14\0\25\143"+
    "\12\0\1\u010a\2\0\2\u010a\1\0\2\u010a\3\0\5\u010a"+
    "\4\0\1\u010a\1\0\1\u010a\2\0\16\u010a\23\0\16\u010a"+
    "\12\0\5\145\1\0\2\145\3\0\5\145\4\0\1\145"+
    "\1\0\1\145\2\0\16\145\14\0\25\145\11\0\1\u010b"+
    "\5\146\1\0\2\146\3\0\5\146\4\0\1\146\1\0"+
    "\1\146\2\0\16\146\14\0\25\146\12\0\1\150\2\0"+
    "\2\150\1\0\2\150\3\0\5\150\4\0\1\150\1\0"+
    "\1\150\2\0\16\150\23\0\16\150\12\0\5\150\1\0"+
    "\2\150\3\0\5\150\4\0\1\150\1\0\1\150\2\0"+
    "\16\150\14\0\25\150\12\0\1\u010c\2\0\2\u010c\1\0"+
    "\2\u010c\3\0\5\u010c\4\0\1\u010c\1\0\1\u010c\2\0"+
    "\16\u010c\23\0\16\u010c\11\0\1\u010d\5\152\1\0\2\152"+
    "\3\0\5\152\4\0\1\152\1\0\1\152\2\0\16\152"+
    "\14\0\25\152\12\0\1\u010e\2\0\2\u010e\1\0\2\u010e"+
    "\3\0\5\u010e\4\0\1\u010e\1\0\1\u010e\2\0\16\u010e"+
    "\23\0\16\u010e\11\0\1\u010f\5\154\1\0\2\154\3\0"+
    "\5\154\4\0\1\154\1\0\1\154\2\0\16\154\14\0"+
    "\25\154\11\0\1\u010f\5\154\1\0\2\154\3\0\3\154"+
    "\1\u0110\1\154\4\0\1\154\1\0\1\154\2\0\16\154"+
    "\14\0\25\154\11\0\1\u010f\5\154\1\0\1\u0111\1\154"+
    "\3\0\5\154\4\0\1\154\1\0\1\154\2\0\16\154"+
    "\14\0\25\154\11\0\1\u010f\5\154\1\0\2\154\3\0"+
    "\4\154\1\u0112\4\0\1\154\1\0\1\154\2\0\16\154"+
    "\14\0\25\154\1\164\2\0\1\u0113\1\164\1\0\1\u0113"+
    "\113\164\2\0\1\166\122\0\1\167\2\0\1\167\117\0"+
    "\1\u0114\116\0\1\174\1\173\1\174\2\0\1\174\114\0"+
    "\3\174\2\0\1\174\117\0\1\314\121\0\1\u0115\1\0"+
    "\1\u0116\114\0\3\174\1\0\1\u0117\1\177\125\0\1\u0118"+
    "\2\0\2\u0118\1\0\2\u0118\3\0\5\u0118\4\0\1\u0118"+
    "\1\0\1\u0118\2\0\1\u0118\1\u0119\14\u0118\23\0\16\u0118"+
    "\2\0\1\202\122\0\1\203\2\0\1\203\117\0\1\u0115"+
    "\127\0\1\u011a\2\0\2\u011a\1\0\2\u011a\3\0\5\u011a"+
    "\4\0\1\u011a\1\0\1\u011a\2\0\16\u011a\23\0\16\u011a"+
    "\12\0\5\206\1\0\2\206\3\0\5\206\4\0\1\206"+
    "\1\0\1\206\2\0\16\206\14\0\25\206\1\207\2\0"+
    "\14\207\1\0\3\207\1\0\50\207\1\0\25\207\2\0"+
    "\1\211\117\0\2\u011b\1\0\14\u011b\1\u011c\1\u011d\2\u011b"+
    "\1\u011e\3\u011b\1\u011f\1\u0120\17\u011b\1\u0121\2\u011b\1\u0122"+
    "\4\u011b\1\u0123\13\u011b\1\u0124\25\u011b\12\0\1\u0125\2\0"+
    "\2\u0125\1\0\2\u0125\3\0\5\u0125\4\0\1\u0125\1\0"+
    "\1\u0125\2\0\16\u0125\23\0\16\u0125\1\216\2\0\14\216"+
    "\1\0\3\216\1\0\1\u0126\5\216\1\u0126\41\216\1\0"+
    "\25\216\1\u0127\2\0\14\u0127\1\0\3\u0127\1\0\50\u0127"+
    "\1\0\25\u0127\1\222\2\0\14\222\1\0\3\222\1\0"+
    "\6\222\1\u0128\41\222\1\0\25\222\1\u0127\2\0\14\u0127"+
    "\1\0\3\u0127\1\0\6\u0127\1\u0129\41\u0127\1\0\25\u0127"+
    "\1\224\2\0\1\224\1\u012a\17\224\1\0\5\224\1\0"+
    "\1\224\1\0\4\224\1\0\25\224\1\0\32\224\1\0"+
    "\3\225\2\0\1\225\113\0\1\u012b\2\225\1\226\1\0"+
    "\1\u012b\1\226\15\u012b\1\0\5\u012b\1\0\1\u012b\1\0"+
    "\4\u012b\1\0\25\u012b\1\0\32\u012b\5\0\1\u012c\114\0"+
    "\1\u012d\3\0\1\u012e\1\u012d\1\0\15\u012d\1\u012f\5\u012d"+
    "\1\0\67\u012d\15\0\2\u0130\1\0\2\u0130\3\0\5\u0130"+
    "\4\0\1\u0130\1\u0131\1\u0130\2\0\16\u0130\23\0\16\u0130"+
    "\4\0\1\u0132\5\0\1\u0133\2\0\2\u0133\1\0\2\u0133"+
    "\3\0\5\u0133\4\0\1\u0133\1\0\1\u0133\2\0\16\u0133"+
    "\4\0\1\u0134\2\0\1\u0135\13\0\16\u0133\12\0\5\234"+
    "\1\0\2\234\3\0\5\234\1\0\1\234\2\0\1\234"+
    "\1\0\1\234\2\0\16\234\1\0\1\u0136\12\0\25\234"+
    "\1\0\3\235\2\0\1\235\120\0\1\u012c\26\0\1\u0137"+
    "\77\0\5\240\1\0\2\240\3\0\5\240\1\0\1\240"+
    "\2\0\1\240\1\0\1\240\2\0\16\240\14\0\25\240"+
    "\1\u0138\3\0\1\u0139\1\u0138\1\0\15\u0138\1\u013a\5\u0138"+
    "\1\0\67\u0138\12\0\5\242\1\0\2\242\3\0\5\242"+
    "\1\0\1\242\2\0\1\242\1\0\1\242\2\0\16\242"+
    "\14\0\25\242\1\u013b\3\0\1\u013c\1\u013b\1\0\15\u013b"+
    "\1\u013d\5\u013b\1\0\67\u013b\12\0\5\252\1\0\2\252"+
    "\3\0\5\252\1\0\1\252\2\0\1\252\1\0\1\252"+
    "\2\0\16\252\14\0\25\252\24\255\1\0\5\255\1\0"+
    "\1\255\1\0\4\255\1\0\25\255\1\0\4\255\1\0"+
    "\32\255\1\u013e\16\255\1\0\5\255\1\0\1\255\1\0"+
    "\4\255\1\0\25\255\1\0\4\255\1\0\25\255\1\u013f"+
    "\3\0\1\u0140\1\u013f\1\0\15\u013f\1\u0141\5\u013f\1\0"+
    "\67\u013f\23\262\2\0\5\262\1\0\1\262\1\0\4\262"+
    "\1\0\25\262\1\0\37\262\1\u0142\15\262\2\0\5\262"+
    "\1\0\1\262\1\0\4\262\1\0\25\262\1\0\32\262"+
    "\1\u0143\3\0\1\u0144\1\u0143\1\0\15\u0143\1\u0145\5\u0143"+
    "\1\0\67\u0143\33\265\1\u0146\121\265\1\u0147\66\265\12\0"+
    "\5\270\1\0\2\270\3\0\5\270\1\0\1\270\2\0"+
    "\1\270\1\0\1\270\2\0\16\270\14\0\25\270\23\u0148"+
    "\1\u0149\76\u0148\1\u014a\3\0\1\u014b\1\u014a\1\0\15\u014a"+
    "\1\u014c\5\u014a\1\0\67\u014a\74\u014d\1\u0149\25\u014d\12\0"+
    "\5\270\1\0\2\270\3\0\5\270\1\0\1\270\2\0"+
    "\1\270\1\0\1\270\2\0\16\270\14\0\21\270\1\u014e"+
    "\3\270\12\0\5\270\1\0\2\270\3\0\5\270\1\0"+
    "\1\270\2\0\1\270\1\0\1\270\2\0\16\270\14\0"+
    "\13\270\1\u014f\11\270\1\u0150\3\0\1\u0151\1\u0150\1\0"+
    "\15\u0150\1\u0152\5\u0150\1\0\67\u0150\34\0\1\302\65\0"+
    "\24\305\1\0\5\305\1\0\2\305\1\u0153\64\305\1\u0154"+
    "\3\0\1\u0155\1\u0154\1\0\15\u0154\1\u0156\5\u0154\1\0"+
    "\67\u0154\24\305\1\0\5\305\1\0\2\305\1\u0157\64\305"+
    "\1\312\2\0\1\u0158\2\312\1\u0158\15\312\1\0\5\312"+
    "\1\0\67\312\1\313\2\0\1\313\1\0\17\313\1\0"+
    "\5\313\1\0\67\313\1\314\1\u0159\1\u015a\117\314\5\u015b"+
    "\1\u015c\114\u015b\1\u015d\3\0\2\u015d\1\0\23\u015d\1\0"+
    "\67\u015d\1\316\3\0\1\317\1\316\1\0\23\316\1\0"+
    "\67\316\12\u015e\5\0\1\u015e\2\0\3\u015e\5\0\4\u015e"+
    "\1\0\1\u015e\1\0\2\u015e\16\0\14\u015e\25\0\12\u015f"+
    "\5\0\1\u015f\2\0\3\u015f\5\0\4\u015f\1\0\1\u015f"+
    "\1\0\2\u015f\16\0\14\u015f\25\0\12\u0160\5\0\1\u0160"+
    "\2\0\3\u0160\5\0\4\u0160\1\0\1\u0160\1\0\2\u0160"+
    "\16\0\14\u0160\77\0\1\u0161\76\0\1\u0162\121\0\1\u0163"+
    "\72\0\12\u0164\5\0\1\u0164\2\0\3\u0164\5\0\4\u0164"+
    "\1\0\1\u0164\1\0\2\u0164\16\0\14\u0164\25\0\12\u0165"+
    "\5\0\1\u0165\1\0\1\u0166\3\u0165\5\0\4\u0165\1\0"+
    "\1\u0165\1\0\2\u0165\16\0\14\u0165\76\0\1\u0167\50\0"+
    "\12\u0168\5\0\1\u0168\2\0\3\u0168\5\0\4\u0168\1\0"+
    "\1\u0168\1\0\2\u0168\16\0\14\u0168\53\0\1\u0169\120\0"+
    "\1\u016a\25\0\1\u016b\74\0\1\u016c\123\0\1\u016d\116\0"+
    "\1\u016e\24\0\1\u016f\121\0\1\u0170\74\0\1\u0171\145\0"+
    "\1\u0172\117\0\1\u0173\52\0\12\u0174\5\0\1\u0174\2\0"+
    "\3\u0174\5\0\4\u0174\1\0\1\u0174\1\0\2\u0174\16\0"+
    "\14\u0174\53\0\1\u0175\123\0\1\u0176\123\0\1\u0177\67\0"+
    "\1\353\1\u0178\1\u0179\117\353\5\u015b\1\u017a\114\u015b\32\0"+
    "\1\u017b\101\0\5\356\1\0\2\356\3\0\5\356\4\0"+
    "\1\356\1\0\1\356\2\0\16\356\14\0\25\356\1\0"+
    "\3\357\2\0\1\357\54\0\1\360\51\0\2\u017c\60\0"+
    "\7\u017c\27\0\1\361\1\0\2\362\60\0\7\362\31\0"+
    "\1\u017d\1\u017e\1\0\1\u017d\2\0\1\u017d\7\0\1\u017d"+
    "\11\0\1\u017d\1\0\1\u017d\5\0\1\u017d\4\0\1\u017d"+
    "\14\0\10\u017d\1\0\1\u017d\3\0\2\u017d\3\0\1\u017d"+
    "\14\0\1\u017f\2\0\2\u017f\1\0\2\u017f\3\0\5\u017f"+
    "\4\0\1\u017f\1\0\1\u017f\2\0\16\u017f\23\0\16\u017f"+
    "\1\0\3\357\2\0\1\357\3\0\5\103\1\0\1\u0180"+
    "\1\103\3\0\5\103\4\0\1\103\1\0\1\103\2\0"+
    "\16\103\2\0\1\360\11\0\25\103\1\0\3\357\2\0"+
    "\1\357\3\0\5\103\1\0\2\103\3\0\5\103\4\0"+
    "\1\103\1\0\1\103\2\0\1\u0181\15\103\2\0\1\360"+
    "\11\0\25\103\76\0\1\u0182\24\0\3\357\2\0\1\357"+
    "\3\0\5\103\1\0\2\103\3\0\1\u0183\4\103\4\0"+
    "\1\103\1\0\1\103\2\0\16\103\2\0\1\360\11\0"+
    "\25\103\1\0\3\357\2\0\1\357\3\0\5\103\1\0"+
    "\2\103\3\0\2\103\1\u0184\2\103\4\0\1\103\1\0"+
    "\1\103\2\0\16\103\2\0\1\360\11\0\25\103\1\0"+
    "\3\357\2\0\1\357\3\0\5\103\1\0\2\103\3\0"+
    "\1\u0185\4\103\4\0\1\103\1\0\1\103\2\0\16\103"+
    "\2\0\1\360\11\0\25\103\35\0\1\u0186\76\0\1\u0187"+
    "\2\0\2\u0187\1\0\2\u0187\3\0\5\u0187\4\0\1\u0187"+
    "\1\0\1\u0187\2\0\16\u0187\23\0\16\u0187\4\136\1\u0188"+
    "\142\136\1\u0189\74\136\12\0\1\141\2\0\2\141\1\0"+
    "\2\141\3\0\5\141\4\0\1\141\1\0\1\141\2\0"+
    "\16\141\23\0\16\141\12\0\1\143\2\0\2\143\1\0"+
    "\2\143\3\0\5\143\4\0\1\143\1\0\1\143\2\0"+
    "\16\143\23\0\16\143\12\0\5\u010a\1\0\2\u010a\3\0"+
    "\5\u010a\4\0\1\u010a\1\0\1\u010a\2\0\16\u010a\14\0"+
    "\25\u010a\12\0\1\146\2\0\2\146\1\0\2\146\3\0"+
    "\5\146\4\0\1\146\1\0\1\146\2\0\16\146\23\0"+
    "\16\146\12\0\5\u010c\1\0\2\u010c\3\0\5\u010c\4\0"+
    "\1\u010c\1\0\1\u010c\2\0\16\u010c\14\0\25\u010c\12\0"+
    "\1\152\2\0\2\152\1\0\2\152\3\0\5\152\4\0"+
    "\1\152\1\0\1\152\2\0\16\152\23\0\16\152\12\0"+
    "\5\u010e\1\0\2\u010e\3\0\5\u010e\4\0\1\u010e\1\0"+
    "\1\u010e\2\0\16\u010e\14\0\25\u010e\12\0\1\154\2\0"+
    "\2\154\1\0\2\154\3\0\5\154\4\0\1\154\1\0"+
    "\1\154\2\0\16\154\23\0\16\154\11\0\1\u010f\5\154"+
    "\1\0\1\u018a\1\154\3\0\5\154\4\0\1\154\1\0"+
    "\1\154\2\0\16\154\14\0\25\154\11\0\1\u010f\5\154"+
    "\1\0\2\154\3\0\1\u018b\4\154\4\0\1\154\1\0"+
    "\1\154\2\0\16\154\14\0\25\154\11\0\1\u010f\5\154"+
    "\1\0\2\154\3\0\1\u018c\4\154\4\0\1\154\1\0"+
    "\1\154\2\0\16\154\14\0\25\154\6\0\1\u0116\125\0"+
    "\5\u0118\1\0\2\u0118\3\0\5\u0118\4\0\1\u0118\1\0"+
    "\1\u0118\2\0\16\u0118\14\0\25\u0118\12\0\5\u0118\1\0"+
    "\2\u0118\3\0\4\u0118\1\u018d\4\0\1\u0118\1\0\1\u0118"+
    "\2\0\16\u0118\14\0\25\u0118\12\0\5\u011a\1\0\2\u011a"+
    "\3\0\5\u011a\4\0\1\u011a\1\0\1\u011a\2\0\16\u011a"+
    "\14\0\25\u011a\13\0\2\u018e\1\0\1\u018e\2\0\1\u018e"+
    "\7\0\1\u018e\11\0\1\u018e\1\0\1\u018e\5\0\1\u018e"+
    "\4\0\1\u018e\14\0\10\u018e\1\0\1\u018e\3\0\2\u018e"+
    "\3\0\1\u018e\14\0\5\u0125\1\0\2\u0125\3\0\5\u0125"+
    "\4\0\1\u0125\1\0\1\u0125\2\0\16\u0125\14\0\25\u0125"+
    "\1\u0127\2\0\14\u0127\1\0\3\u0127\1\0\6\u0127\1\u018f"+
    "\41\u0127\1\0\25\u0127\1\u012a\2\0\1\u0190\2\u012a\1\u0190"+
    "\15\u012a\1\0\5\u012a\1\0\1\u012a\1\0\4\u012a\1\0"+
    "\25\u012a\1\0\32\u012a\1\u012b\2\0\1\u012b\1\0\17\u012b"+
    "\1\0\5\u012b\1\0\1\u012b\1\0\4\u012b\1\0\25\u012b"+
    "\1\0\32\u012b\5\u015b\1\u0191\114\u015b\1\u0192\3\0\2\u0192"+
    "\1\0\23\u0192\1\0\67\u0192\1\u012d\3\0\1\u012e\1\u012d"+
    "\1\0\23\u012d\1\0\67\u012d\13\0\4\u0193\1\0\2\u0193"+
    "\3\0\5\u0193\4\0\1\u0193\1\0\1\u0193\2\0\16\u0193"+
    "\14\0\25\u0193\13\0\1\u0194\24\0\1\u0195\34\0\7\u0194"+
    "\30\0\1\u0196\2\0\2\u0196\1\0\2\u0196\3\0\5\u0196"+
    "\4\0\1\u0196\1\0\1\u0196\2\0\16\u0196\23\0\16\u0196"+
    "\33\0\1\u0197\25\0\1\u0198\22\0\1\u0199\27\0\1\u019a"+
    "\2\0\2\u019a\1\0\2\u019a\3\0\5\u019a\4\0\1\u019a"+
    "\1\0\1\u019a\2\0\16\u019a\23\0\16\u019a\1\u019b\3\0"+
    "\2\u019b\1\0\23\u019b\1\0\67\u019b\1\u0138\3\0\1\u0139"+
    "\1\u0138\1\0\23\u0138\1\0\67\u0138\1\u019c\3\0\2\u019c"+
    "\1\0\23\u019c\1\0\67\u019c\1\u013b\3\0\1\u013c\1\u013b"+
    "\1\0\23\u013b\1\0\67\u013b\5\u019d\1\u019e\16\u019d\1\u015b"+
    "\5\u019d\1\u015b\1\u019d\1\u015b\4\u019d\1\u015b\25\u019d\1\u015b"+
    "\4\u019d\1\u015b\25\u019d\1\u019f\3\0\2\u019f\1\0\23\u019f"+
    "\1\0\67\u019f\1\u013f\3\0\1\u0140\1\u013f\1\0\23\u013f"+
    "\1\0\67\u013f\5\u01a0\1\u01a1\15\u01a0\2\u015b\5\u01a0\1\u015b"+
    "\1\u01a0\1\u015b\4\u01a0\1\u015b\25\u01a0\1\u015b\32\u01a0\1\u01a2"+
    "\3\0\2\u01a2\1\0\23\u01a2\1\0\67\u01a2\1\u0143\3\0"+
    "\1\u0144\1\u0143\1\0\23\u0143\1\0\67\u0143\33\265\1\u01a3"+
    "\122\265\1\u01a4\65\265\1\u01a5\3\0\2\u01a5\1\0\23\u01a5"+
    "\1\0\67\u01a5\1\u014a\3\0\1\u014b\1\u014a\1\0\23\u014a"+
    "\1\0\67\u014a\12\0\5\270\1\0\2\270\3\0\5\270"+
    "\1\0\1\270\2\0\1\270\1\0\1\270\2\0\16\270"+
    "\14\0\22\270\1\u01a6\2\270\12\0\5\270\1\0\2\270"+
    "\3\0\5\270\1\0\1\270\2\0\1\270\1\0\1\270"+
    "\2\0\16\270\14\0\17\270\1\u01a7\5\270\1\u01a8\3\0"+
    "\2\u01a8\1\0\23\u01a8\1\0\67\u01a8\1\u0150\3\0\1\u0151"+
    "\1\u0150\1\0\23\u0150\1\0\67\u0150\24\305\1\0\5\305"+
    "\1\0\2\305\1\u01a9\64\305\1\u01aa\3\0\2\u01aa\1\0"+
    "\23\u01aa\1\0\67\u01aa\1\u0154\3\0\1\u0155\1\u0154\1\0"+
    "\23\u0154\1\0\67\u0154\24\305\1\0\5\305\1\0\1\305"+
    "\1\u01ab\65\305\2\0\1\u015a\117\0\5\u015b\1\u01ac\114\u015b"+
    "\4\0\1\u0179\1\u017a\135\0\1\u01ad\100\0\12\u01ae\5\0"+
    "\1\u01ae\2\0\3\u01ae\5\0\4\u01ae\1\0\1\u01ae\1\0"+
    "\2\u01ae\16\0\14\u01ae\46\0\1\u01af\151\0\1\u01b0\114\0"+
    "\1\u01b1\106\0\1\u01b2\117\0\1\u01b3\14\0\1\u01b4\1\u01b5"+
    "\105\0\1\u01b6\140\0\1\u01b7\102\0\1\u01b8\115\0\1\u01b9"+
    "\115\0\1\u01ba\100\0\12\u01bb\5\0\1\u01bb\2\0\3\u01bb"+
    "\5\0\4\u01bb\1\0\1\u01bb\1\0\2\u01bb\16\0\14\u01bb"+
    "\25\0\12\u01bc\5\0\1\u01bc\2\0\3\u01bc\5\0\4\u01bc"+
    "\1\0\1\u01bc\1\0\2\u01bc\16\0\14\u01bc\46\0\1\u01bd"+
    "\100\0\12\u01be\5\0\1\u01be\2\0\3\u01be\5\0\4\u01be"+
    "\1\0\1\u01be\1\0\2\u01be\16\0\14\u01be\54\0\1\u01bf"+
    "\72\0\12\u01c0\5\0\1\u01c0\1\0\1\u01c1\3\u01c0\5\0"+
    "\4\u01c0\1\0\1\u01c0\1\0\2\u01c0\16\0\14\u01c0\27\0"+
    "\1\u0179\132\0\2\u017c\4\0\1\u01c2\53\0\7\u017c\31\0"+
    "\2\u01c3\1\0\1\u01c3\2\0\1\u01c3\7\0\1\u01c3\11\0"+
    "\1\u01c3\1\0\1\u01c3\5\0\1\u01c3\4\0\1\u01c3\14\0"+
    "\10\u01c3\1\0\1\u01c3\3\0\2\u01c3\3\0\1\u01c3\14\0"+
    "\5\u017f\1\0\2\u017f\1\0\1\u01c4\1\0\5\u017f\4\0"+
    "\1\u017f\1\0\1\u017f\2\0\16\u017f\14\0\25\u017f\1\0"+
    "\3\357\2\0\1\357\3\0\5\103\1\0\1\103\1\u01c5"+
    "\3\0\5\103\4\0\1\103\1\0\1\103\2\0\16\103"+
    "\2\0\1\360\11\0\25\103\77\0\1\u01c6\23\0\3\357"+
    "\2\0\1\357\3\0\5\103\1\0\2\103\3\0\1\u01c7"+
    "\4\103\4\0\1\103\1\0\1\103\2\0\16\103\2\0"+
    "\1\360\11\0\25\103\1\0\3\357\2\0\1\357\3\0"+
    "\5\103\1\0\2\103\3\0\5\103\4\0\1\103\1\0"+
    "\1\103\2\0\7\103\1\u01c8\6\103\2\0\1\360\11\0"+
    "\25\103\12\0\5\u0187\1\0\2\u0187\3\0\5\u0187\4\0"+
    "\1\u0187\1\0\1\u0187\2\0\16\u0187\13\0\1\u01c4\25\u0187"+
    "\25\136\1\u01c9\122\136\1\u01ca\73\136\11\0\1\u010f\5\154"+
    "\1\0\1\154\1\u01cb\3\0\5\154\4\0\1\154\1\0"+
    "\1\154\2\0\16\154\14\0\25\154\11\0\1\u010f\5\154"+
    "\1\0\2\154\3\0\1\u01cc\4\154\4\0\1\154\1\0"+
    "\1\154\2\0\16\154\14\0\25\154\11\0\1\u010f\5\154"+
    "\1\0\2\154\3\0\5\154\4\0\1\154\1\0\1\154"+
    "\2\0\7\154\1\u01cd\6\154\14\0\25\154\12\0\5\u0118"+
    "\1\0\2\u0118\3\0\3\u0118\1\u01ce\1\u0118\4\0\1\u0118"+
    "\1\0\1\u0118\2\0\16\u0118\14\0\25\u0118\13\0\2\u01cf"+
    "\1\0\1\u01cf\2\0\1\u01cf\7\0\1\u01cf\11\0\1\u01cf"+
    "\1\0\1\u01cf\5\0\1\u01cf\4\0\1\u01cf\14\0\10\u01cf"+
    "\1\0\1\u01cf\3\0\2\u01cf\3\0\1\u01cf\2\0\4\u015b"+
    "\1\u01d0\1\u0191\114\u015b\13\0\4\u01d1\1\0\2\u01d1\3\0"+
    "\5\u01d1\4\0\1\u01d1\1\0\1\u01d1\1\0\1\u01d2\16\u01d1"+
    "\14\0\25\u01d1\13\0\2\u0194\22\0\1\u01d3\35\0\7\u0194"+
    "\31\0\1\u01d4\1\u01d5\1\0\1\u01d4\2\0\1\u01d4\7\0"+
    "\1\u01d4\11\0\1\u01d4\1\0\1\u01d4\5\0\1\u01d4\4\0"+
    "\1\u01d4\14\0\10\u01d4\1\0\1\u01d4\3\0\2\u01d4\3\0"+
    "\1\u01d4\35\0\1\u01d6\174\0\1\u01d7\120\0\1\u01d8\26\0"+
    "\5\u019a\1\0\2\u019a\3\0\5\u019a\1\0\1\u019a\2\0"+
    "\1\u019a\1\0\1\u019a\2\0\16\u019a\14\0\25\u019a\5\u019d"+
    "\1\u01d9\16\u019d\1\u015b\5\u019d\1\u015b\1\u019d\1\u015b\4\u019d"+
    "\1\u015b\25\u019d\1\u015b\4\u019d\1\u015b\31\u019d\1\u01da\1\u019e"+
    "\16\u019d\1\u015b\5\u019d\1\u015b\1\u019d\1\u015b\4\u019d\1\u015b"+
    "\25\u019d\1\u015b\4\u019d\1\u015b\25\u019d\5\u01a0\1\u01db\15\u01a0"+
    "\2\u015b\5\u01a0\1\u015b\1\u01a0\1\u015b\4\u01a0\1\u015b\25\u01a0"+
    "\1\u015b\36\u01a0\1\u01dc\1\u01a1\15\u01a0\2\u015b\5\u01a0\1\u015b"+
    "\1\u01a0\1\u015b\4\u01a0\1\u015b\25\u01a0\1\u015b\32\u01a0\34\265"+
    "\1\0\65\265\12\0\5\270\1\0\2\270\3\0\5\270"+
    "\1\0\1\270\2\0\1\270\1\0\1\270\2\0\16\270"+
    "\14\0\23\270\1\u01dd\1\270\12\0\5\270\1\0\2\270"+
    "\3\0\5\270\1\0\1\270\2\0\1\270\1\0\1\270"+
    "\2\0\16\270\14\0\12\270\1\u01de\12\270\24\305\1\0"+
    "\5\305\1\0\1\305\1\0\65\305\4\u015b\1\u0179\1\u01ac"+
    "\114\u015b\12\u01df\5\0\1\u01df\2\0\3\u01df\1\0\1\u01e0"+
    "\3\0\4\u01df\1\0\1\u01df\1\0\2\u01df\16\0\14\u01df"+
    "\55\0\1\u01e1\135\0\1\u01e2\102\0\1\u01e3\146\0\1\u01e4"+
    "\70\0\1\u01e5\131\0\1\u01e6\121\0\1\u01e7\110\0\1\u01e8"+
    "\130\0\1\u01e9\143\0\1\u01ea\50\0\12\u01eb\5\0\1\u01eb"+
    "\2\0\3\u01eb\5\0\4\u01eb\1\0\1\u01eb\1\0\2\u01eb"+
    "\16\0\14\u01eb\25\0\12\u01ec\5\0\1\u01ec\2\0\3\u01ec"+
    "\5\0\4\u01ec\1\0\1\u01ec\1\0\2\u01ec\16\0\14\u01ec"+
    "\77\0\1\u01ed\114\0\1\u01ee\105\0\1\u01ef\103\0\2\u01f0"+
    "\5\0\1\u01f1\10\0\1\u01f1\41\0\7\u01f0\31\0\2\u01f2"+
    "\1\0\1\u01f2\2\0\1\u01f2\7\0\1\u01f2\11\0\1\u01f2"+
    "\1\0\1\u01f2\5\0\1\u01f2\4\0\1\u01f2\14\0\10\u01f2"+
    "\1\0\1\u01f2\3\0\2\u01f2\3\0\1\u01f2\102\0\1\u01f3"+
    "\22\0\3\357\2\0\1\357\3\0\5\103\1\0\1\103"+
    "\1\u01f4\3\0\5\103\4\0\1\103\1\0\1\103\2\0"+
    "\16\103\2\0\1\360\11\0\25\103\26\136\1\u01f5\122\136"+
    "\1\u01f6\72\136\11\0\1\u010f\5\154\1\0\1\154\1\u01f7"+
    "\3\0\5\154\4\0\1\154\1\0\1\154\2\0\16\154"+
    "\14\0\25\154\12\0\5\u0118\1\0\2\u0118\3\0\4\u0118"+
    "\1\u01f8\4\0\1\u0118\1\0\1\u0118\2\0\16\u0118\14\0"+
    "\25\u0118\13\0\2\u01f9\1\0\1\u01f9\2\0\1\u01f9\7\0"+
    "\1\u01f9\11\0\1\u01f9\1\0\1\u01f9\5\0\1\u01f9\4\0"+
    "\1\u01f9\14\0\10\u01f9\1\0\1\u01f9\3\0\2\u01f9\3\0"+
    "\1\u01f9\15\0\4\u01fa\1\0\2\u01fa\3\0\5\u01fa\4\0"+
    "\1\u01fa\1\0\1\u01fa\1\0\1\u01d2\16\u01fa\14\0\25\u01fa"+
    "\14\0\1\u01d5\120\0\2\u01fb\1\0\1\u01fb\2\0\1\u01fb"+
    "\7\0\1\u01fb\10\0\1\u01d2\1\u01fb\1\0\1\u01fb\5\0"+
    "\1\u01fb\4\0\1\u01fb\14\0\10\u01fb\1\0\1\u01fb\3\0"+
    "\2\u01fb\3\0\1\u01fb\44\0\1\u01d2\163\0\1\u01fc\123\0"+
    "\1\u01fd\13\0\4\u019d\1\u01fe\1\u01d9\16\u019d\1\u015b\5\u019d"+
    "\1\u015b\1\u019d\1\u015b\4\u019d\1\u015b\25\u019d\1\u015b\4\u019d"+
    "\1\u015b\25\u019d\4\u01a0\1\u01ff\1\u01db\15\u01a0\2\u015b\5\u01a0"+
    "\1\u015b\1\u01a0\1\u015b\4\u01a0\1\u015b\25\u01a0\1\u015b\32\u01a0"+
    "\12\0\5\270\1\0\2\270\3\0\5\270\1\0\1\270"+
    "\2\0\1\270\1\0\1\270\2\0\16\270\14\0\24\270"+
    "\1\u0200\12\0\5\270\1\0\2\270\3\0\5\270\1\0"+
    "\1\270\2\0\1\270\1\0\1\270\2\0\16\270\14\0"+
    "\15\270\1\u0201\7\270\53\0\1\u0202\77\0\1\u0203\117\0"+
    "\1\u0204\123\0\1\u0205\70\0\12\u0206\5\0\1\u0206\2\0"+
    "\3\u0206\5\0\4\u0206\1\0\1\u0206\1\0\2\u0206\16\0"+
    "\14\u0206\76\0\1\u0207\115\0\1\u0208\101\0\1\u0209\121\0"+
    "\1\u020a\74\0\12\u020b\5\0\1\u020b\2\0\3\u020b\5\0"+
    "\4\u020b\1\0\1\u020b\1\0\2\u020b\16\0\14\u020b\25\0"+
    "\12\u020c\5\0\1\u020c\2\0\3\u020c\5\0\4\u020c\1\0"+
    "\1\u020c\1\0\2\u020c\16\0\14\u020c\71\0\1\u020d\132\0"+
    "\1\u020e\111\0\1\u020f\67\0\2\u01f0\60\0\7\u01f0\31\0"+
    "\2\u0210\1\0\1\u0210\2\0\1\u0210\7\0\1\u0210\11\0"+
    "\1\u0210\1\0\1\u0210\5\0\1\u0210\4\0\1\u0210\14\0"+
    "\10\u0210\1\0\1\u0210\3\0\2\u0210\3\0\1\u0210\101\0"+
    "\1\u0211\22\0\27\136\1\u0212\113\136\1\u0213\100\136\12\0"+
    "\5\u0118\1\0\2\u0118\3\0\5\u0118\4\0\1\u0118\1\0"+
    "\1\u0118\2\0\6\u0118\1\u0214\7\u0118\14\0\25\u0118\13\0"+
    "\2\u0215\1\0\1\u0215\2\0\1\u0215\7\0\1\u0215\11\0"+
    "\1\u0215\1\0\1\u0215\5\0\1\u0215\4\0\1\u0215\14\0"+
    "\10\u0215\1\0\1\u0215\3\0\2\u0215\3\0\1\u0215\15\0"+
    "\4\u0216\1\0\2\u0216\3\0\5\u0216\4\0\1\u0216\1\0"+
    "\1\u0216\1\0\1\u01d2\16\u0216\14\0\25\u0216\13\0\2\u0217"+
    "\1\0\1\u0217\2\0\1\u0217\7\0\1\u0217\10\0\1\u01d2"+
    "\1\u0217\1\0\1\u0217\5\0\1\u0217\4\0\1\u0217\14\0"+
    "\10\u0217\1\0\1\u0217\3\0\2\u0217\3\0\1\u0217\115\0"+
    "\1\u0218\115\0\1\u0219\24\0\5\270\1\0\2\270\3\0"+
    "\5\270\1\0\1\270\2\0\1\270\1\0\1\270\2\0"+
    "\16\270\14\0\11\270\1\u021a\13\270\12\0\5\270\1\0"+
    "\2\270\3\0\5\270\1\0\1\270\2\0\1\270\1\0"+
    "\1\270\2\0\16\270\14\0\20\270\1\u021b\4\270\12\u021c"+
    "\5\0\1\u021c\2\0\3\u021c\5\0\4\u021c\1\0\1\u021c"+
    "\1\0\2\u021c\16\0\14\u021c\52\0\1\u021d\153\0\1\u021e"+
    "\71\0\1\u021f\136\0\1\u0220\123\0\1\u0221\100\0\1\u0222"+
    "\123\0\1\u0223\123\0\1\u0224\70\0\12\u0225\5\0\1\u0225"+
    "\2\0\3\u0225\5\0\4\u0225\1\0\1\u0225\1\0\2\u0225"+
    "\16\0\14\u0225\102\0\1\u0226\57\0\2\u0227\1\0\1\u0227"+
    "\2\0\1\u0227\7\0\1\u0227\11\0\1\u0227\1\0\1\u0227"+
    "\5\0\1\u0227\4\0\1\u0227\14\0\10\u0227\1\0\1\u0227"+
    "\3\0\2\u0227\3\0\1\u0227\103\0\1\u0228\20\0\21\136"+
    "\1\u0229\130\136\1\u022a\71\136\12\0\5\u0118\1\0\2\u0118"+
    "\3\0\5\u0118\4\0\1\u0118\1\0\1\u0118\2\0\16\u0118"+
    "\4\0\1\u022b\7\0\25\u0118\13\0\4\u022c\1\0\2\u022c"+
    "\3\0\5\u022c\4\0\1\u022c\1\0\1\u022c\1\0\1\u01d2"+
    "\16\u022c\14\0\25\u022c\13\0\2\u01d5\1\0\1\u01d5\2\0"+
    "\1\u01d5\7\0\1\u01d5\10\0\1\u01d2\1\u01d5\1\0\1\u01d5"+
    "\5\0\1\u01d5\4\0\1\u01d5\14\0\10\u01d5\1\0\1\u01d5"+
    "\3\0\2\u01d5\3\0\1\u01d5\111\0\1\u022d\122\0\1\u022e"+
    "\11\0\12\u022f\5\0\1\u022f\2\0\3\u022f\5\0\4\u022f"+
    "\1\0\1\u022f\1\0\2\u022f\16\0\14\u022f\25\0\12\u0230"+
    "\5\0\1\u0230\2\0\3\u0230\5\0\4\u0230\1\0\1\u0230"+
    "\1\0\2\u0230\16\0\14\u0230\46\0\1\u0231\125\0\1\u0232"+
    "\125\0\1\u0233\70\0\12\u0234\5\0\1\u0234\2\0\3\u0234"+
    "\5\0\4\u0234\1\0\1\u0234\1\0\2\u0234\16\0\14\u0234"+
    "\25\0\12\u0235\5\0\1\u0235\2\0\3\u0235\5\0\4\u0235"+
    "\1\0\1\u0235\1\0\2\u0235\16\0\14\u0235\72\0\1\u0236"+
    "\54\0\12\u0237\5\0\1\u0237\2\0\3\u0237\5\0\4\u0237"+
    "\1\0\1\u0237\1\0\2\u0237\16\0\14\u0237\40\0\2\u0238"+
    "\1\0\1\u0238\2\0\1\u0238\7\0\1\u0238\11\0\1\u0238"+
    "\1\0\1\u0238\5\0\1\u0238\4\0\1\u0238\14\0\10\u0238"+
    "\1\0\1\u0238\3\0\2\u0238\3\0\1\u0238\104\0\1\u0239"+
    "\17\0\30\136\1\u023a\122\136\1\u023b\70\136\13\0\4\u023c"+
    "\1\0\2\u023c\3\0\5\u023c\4\0\1\u023c\1\0\1\u023c"+
    "\1\0\1\u01d2\16\u023c\14\0\25\u023c\113\0\1\u023d\117\0"+
    "\1\u023e\10\0\12\u023f\5\0\1\u023f\2\0\3\u023f\5\0"+
    "\4\u023f\1\0\1\u023f\1\0\2\u023f\16\0\14\u023f\56\0"+
    "\1\u0240\137\0\1\u0241\73\0\1\u0242\113\0\2\u0243\1\0"+
    "\1\u0243\2\0\1\u0243\7\0\1\u0243\11\0\1\u0243\1\0"+
    "\1\u0243\5\0\1\u0243\4\0\1\u0243\14\0\10\u0243\1\0"+
    "\1\u0243\3\0\2\u0243\3\0\1\u0243\105\0\1\u0244\16\0"+
    "\31\136\1\u0245\115\136\1\u0246\74\136\13\0\4\u0247\1\0"+
    "\2\u0247\3\0\5\u0247\4\0\1\u0247\1\0\1\u0247\1\0"+
    "\1\u01d2\16\u0247\14\0\25\u0247\61\0\1\u0248\152\0\1\u0249"+
    "\36\0\1\u024a\113\0\1\u024b\100\0\12\u024c\5\0\1\u024c"+
    "\2\0\3\u024c\5\0\4\u024c\1\0\1\u024c\1\0\2\u024c"+
    "\16\0\14\u024c\40\0\2\u024d\1\0\1\u024d\2\0\1\u024d"+
    "\7\0\1\u024d\11\0\1\u024d\1\0\1\u024d\5\0\1\u024d"+
    "\4\0\1\u024d\14\0\10\u024d\1\0\1\u024d\3\0\2\u024d"+
    "\3\0\1\u024d\101\0\1\u024e\22\0\25\136\1\u024f\126\136"+
    "\1\u0250\67\136\13\0\4\u0251\1\0\2\u0251\3\0\5\u0251"+
    "\4\0\1\u0251\1\0\1\u0251\1\0\1\u01d2\16\u0251\14\0"+
    "\25\u0251\21\0\1\u0252\100\0\12\u0253\5\0\1\u0253\2\0"+
    "\3\u0253\5\0\4\u0253\1\0\1\u0253\1\0\2\u0253\16\0"+
    "\14\u0253\126\0\1\u0254\20\0\32\136\1\0\67\136\13\0"+
    "\4\u01d5\1\0\2\u01d5\3\0\5\u01d5\4\0\1\u01d5\1\0"+
    "\1\u01d5\1\0\1\u01d2\16\u01d5\14\0\25\u01d5\12\u0255\5\0"+
    "\1\u0255\2\0\3\u0255\5\0\4\u0255\1\0\1\u0255\1\0"+
    "\2\u0255\16\0\14\u0255\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34932];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\41\0\6\1\2\11\17\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\5\1\1\11\4\1\3\11\4\1\3\11\2\1"+
    "\1\0\1\11\1\1\1\11\16\1\3\11\2\1\1\11"+
    "\2\1\1\11\10\1\1\11\6\1\1\11\1\1\1\11"+
    "\1\0\1\11\1\1\1\11\11\1\1\11\4\1\1\11"+
    "\5\1\2\11\1\1\2\11\2\1\2\11\3\1\2\11"+
    "\4\1\1\0\4\1\2\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\0\1\11\4\1\1\0\1\11"+
    "\2\1\1\11\13\0\1\11\13\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\11\4\0\2\1\1\11\1\0"+
    "\1\11\4\1\1\11\1\0\5\11\5\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\2\11\1\1"+
    "\1\0\3\1\2\11\1\1\7\11\7\1\1\0\1\11"+
    "\2\1\3\0\2\11\2\0\2\11\2\1\1\11\3\1"+
    "\1\11\3\1\1\11\2\1\3\0\2\11\2\1\1\0"+
    "\2\1\1\11\2\1\1\0\1\11\2\1\2\0\1\1"+
    "\1\11\1\0\1\1\4\11\3\0\2\11\2\0\1\11"+
    "\13\0\1\11\2\0\1\11\1\1\1\11\1\0\1\11"+
    "\3\1\1\0\2\1\1\0\3\1\1\11\3\0\4\1"+
    "\1\0\1\1\2\0\1\11\3\0\1\11\3\0\1\1"+
    "\2\11\2\1\1\11\2\1\1\11\1\0\2\11\2\1"+
    "\1\11\1\0\2\11\2\0\1\11\14\0\2\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\1\1\11\1\1\1\0"+
    "\2\1\2\0\4\1\1\0\1\1\1\0\1\11\3\0"+
    "\1\11\2\0\6\1\1\11\13\0\2\11\3\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\5\0\4\1"+
    "\4\0\1\11\4\0\2\11\3\0\1\1\3\0\1\1"+
    "\1\11\4\0\2\1\1\11\10\0\1\11\1\0\1\1"+
    "\3\0\1\11\3\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\1\6\0\1\11\3\0\1\1\4\0\2\11\2\0"+
    "\2\11\2\0\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[597];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SoyScanner() {
    this((java.io.Reader)null);
  }


  SoyScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  SoyScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 90: 
          { return symbol(LINE_COMMENT, yytext().toString());
          }
        case 202: break;
        case 107: 
          { return symbol(NOTEQ);
          }
        case 203: break;
        case 194: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : TEMPLATE_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   boolean ok = closeTag || currentTemplate == null;
                                   if (closeTag) {
                                     currentTemplate = null;
                                     nextStateAfterCloseTag = YYINITIAL;
                                   } else {
                                     nextStateAfterCloseTag = HTML_INITIAL;
                                   }
                                   return symbol(ok ? TEMPLATE : UNTERMINATED_TEMPLATE);
          }
        case 204: break;
        case 34: 
          { yybegin(SOY_TAG); yypushback(1); return symbol(ILLEGAL_TAG_DECLARATION);
          }
        case 205: break;
        case 151: 
          { return symbol(AND);
          }
        case 206: break;
        case 91: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = YYINITIAL;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 207: break;
        case 109: 
          { return symbol(PARAMETER_REF, yytext().toString());
          }
        case 208: break;
        case 101: 
          { return symbol(OR);
          }
        case 209: break;
        case 153: 
          { return symbol(EMPTY_OBJECT_LITERAL);
          }
        case 210: break;
        case 70: 
          { yybegin(HTML_ATTRIBUTE_EQ); return symbol(XML_EQ);
          }
        case 211: break;
        case 127: 
          { yybegin(HTML_TAG_START);
                                   closeHtml = false;
                                   yypushback(1);
                                   return symbol(XML_START_TAG_START);
          }
        case 212: break;
        case 50: 
          { return symbol(DOC_COMMENT_EOL);
          }
        case 213: break;
        case 59: 
          { yybegin(STRING);
                                   return symbol(STRING_LITERAL, yytext().toString());
          }
        case 214: break;
        case 146: 
          { yypushback(1); yybegin(CLOSE_TAG); return symbol(SP_LITERAL);
          }
        case 215: break;
        case 112: 
          { yybegin(DOCS); return symbol(DOC_COMMENT_TAG, yytext().toString());
          }
        case 216: break;
        case 165: 
          { yybegin(HTML_INITIAL); return symbol(XML_CDATA_END);
          }
        case 217: break;
        case 32: 
          { return symbol(COMMA);
          }
        case 218: break;
        case 1: 
          { return symbol(IGNORED_TEXT, yytext().toString());
          }
        case 219: break;
        case 200: 
          { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 220: break;
        case 160: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_ATTRIBUTE_VALUE_2;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 221: break;
        case 68: 
          { yybegin(HTML_INITIAL); return symbol(XML_TAG_END);
          }
        case 222: break;
        case 67: 
          { nextStateAfterWhitespace = yystate();
                                   yybegin(AFTER_WHITESPACE);
                                   return symbol(TAG_WHITE_SPACE);
          }
        case 223: break;
        case 58: 
          { yybegin(nextStateAfterString); return symbol(STRING_LITERAL_END, yytext().toString());
          }
        case 224: break;
        case 23: 
          { return symbol(LBRACK);
          }
        case 225: break;
        case 14: 
          { String ident = yytext().toString();
                                   if ("in".equals(ident) && ("for".equals(currentCommand) || "foreach".equals(currentCommand))) {
                                     return symbol(IN);
                                   }
                                   return symbol(CAPTURED_IDENTIFIER, yytext().toString());
          }
        case 226: break;
        case 169: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(MSG);
          }
        case 227: break;
        case 116: 
          { return symbol(STRING_LITERAL_ESCAPE, "\"");
          }
        case 228: break;
        case 180: 
          { yypushback(1);
                                   yybegin(NAMESPACE_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   nextStateAfterCloseTag = YYINITIAL;
                                   return symbol(closeTag ? ILLEGAL_TAG_DECLARATION : ALIAS);
          }
        case 229: break;
        case 84: 
          { nextStateAfterHtmlAttribute = HTML_DOCTYPE;
                                   yybegin(HTML_ATTRIBUTE_VALUE);
                                   return symbol(XML_EQ);
          }
        case 230: break;
        case 137: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_CDATA;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 231: break;
        case 87: 
          { nextStateAfterHtmlAttribute = HTML_DIRECTIVE;
                                   yybegin(HTML_ATTRIBUTE_VALUE);
                                   return symbol(XML_EQ);
          }
        case 232: break;
        case 128: 
          { yybegin(HTML_DIRECTIVE);
                                   return symbol(XML_DECL_START);
          }
        case 233: break;
        case 24: 
          { return symbol(COLON);
          }
        case 234: break;
        case 155: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_INITIAL;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 235: break;
        case 183: 
          { yybegin(DOCS_IDENT); return symbol(DOC_COMMENT_PARAM_TAG, yytext().toString());
          }
        case 236: break;
        case 122: 
          { return symbol(STRING_LITERAL_ESCAPE, "\'");
          }
        case 237: break;
        case 15: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext().toString()));
          }
        case 238: break;
        case 80: 
          { yybegin(nextStateAfterHtmlAttribute);
                                   return symbol(XML_ATTRIBUTE_VALUE_END_DELIMITER);
          }
        case 239: break;
        case 46: 
          { return symbol(DOC_COMMENT, yytext().toString());
          }
        case 240: break;
        case 143: 
          { yypushback(1); yybegin(CLOSE_TAG); return symbol(LB_LITERAL);
          }
        case 241: break;
        case 132: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_ATTRIBUTE_VALUE_1;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 242: break;
        case 45: 
          { return symbol(DIRECTIVE_COMMA);
          }
        case 243: break;
        case 102: 
          { return symbol(EMPTY_ARRAY_LITERAL);
          }
        case 244: break;
        case 184: 
          { char val = (char)parseLong(2, yylength(), 16);
                                   return symbol(STRING_LITERAL_ESCAPE, String.valueOf(val));
          }
        case 245: break;
        case 13: 
          { return symbol(DOT);
          }
        case 246: break;
        case 139: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = YYINITIAL;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 247: break;
        case 79: 
          { yybegin(nextStateAfterHtmlAttribute);
                                   return symbol(XML_BAD_CHARACTER);
          }
        case 248: break;
        case 49: 
          { yybegin(DOCS); yypushback(1);
          }
        case 249: break;
        case 21: 
          { return symbol(GT);
          }
        case 250: break;
        case 10: 
          { return symbol(ILLEGAL_TAG_DECLARATION, yytext().toString());
          }
        case 251: break;
        case 9: 
          { if (!doubleBraceTag) {
                                     yybegin(nextStateAfterCloseTag);
                                     return symbol(TAG_RBRACE);
                                   }
                                   return symbol(RBRACE);
          }
        case 252: break;
        case 158: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_ATTRIBUTE_NAME;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 253: break;
        case 36: 
          { yybegin(CLOSE_TAG); yypushback(1);
          }
        case 254: break;
        case 41: 
          { yybegin(SOY_TAG);
                                   return symbol(capturedIdentifierType, yytext().toString());
          }
        case 255: break;
        case 197: 
          { yypushback(1);
                                   yybegin(NAMESPACE_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   nextStateAfterCloseTag = YYINITIAL;
                                   return symbol(closeTag ? ILLEGAL_TAG_DECLARATION : NAMESPACE);
          }
        case 256: break;
        case 7: 
          { if (doubleBraceTag) return symbol(RBRACE);
                                   yybegin(currentCommand == null ? YYINITIAL : HTML_INITIAL);
                                   return symbol(RBRACE_ERROR);
          }
        case 257: break;
        case 43: 
          { return symbol(DIRECTIVE_COLON);
          }
        case 258: break;
        case 97: 
          { return symbol(PARAMETER_REF, yytext().toString().substring(1));
          }
        case 259: break;
        case 201: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : DELTEMPLATE_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   boolean ok = closeTag || currentTemplate == null;
                                   if (closeTag) {
                                     currentTemplate = null;
                                     nextStateAfterCloseTag = YYINITIAL;
                                   } else {
                                     nextStateAfterCloseTag = HTML_INITIAL;
                                   }
                                   return symbol(ok ? DELTEMPLATE : UNTERMINATED_TEMPLATE);
          }
        case 260: break;
        case 174: 
          { return symbol(XML_CHAR_ENTITY_REF, yytext());
          }
        case 261: break;
        case 61: 
          { return symbol(BRACE_IN_STRING, yytext().toString());
          }
        case 262: break;
        case 156: 
          { yybegin(HTML_TAG_START);
                                   closeHtml = true;
                                   yypushback(1);
                                   return symbol(XML_END_TAG_START);
          }
        case 263: break;
        case 83: 
          { yybegin(HTML_INITIAL); return symbol(XML_DOCTYPE_END);
          }
        case 264: break;
        case 193: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(FOREACH);
          }
        case 265: break;
        case 113: 
          { yypushback(yylength() - 1);
                                   return symbol(DOC_COMMENT_BAD_CHARACTER);
          }
        case 266: break;
        case 6: 
          { yybegin(SOY_TAG); yypushback(1);
          }
        case 267: break;
        case 138: 
          { yybegin(DOCS); return symbol(DOC_COMMENT_BEGIN);
          }
        case 268: break;
        case 29: 
          { return symbol(LT);
          }
        case 269: break;
        case 42: 
          { return symbol(DIRECTIVE_IDENTIFIER, yytext().toString());
          }
        case 270: break;
        case 81: 
          { return symbol(XML_COMMENT_CHARACTERS);
          }
        case 271: break;
        case 26: 
          { return symbol(RPAREN);
          }
        case 272: break;
        case 144: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(IF);
          }
        case 273: break;
        case 28: 
          { return symbol(EQ);
          }
        case 274: break;
        case 103: 
          { return symbol(QUESTION_DOT);
          }
        case 275: break;
        case 189: 
          { yypushback(1);
                                   yybegin(CLOSE_TAG);
                                   if (closeTag) {
                                     nextStateAfterCloseTag = nextStateAfterLiterealTag;
                                   } else {
                                     nextStateAfterLiterealTag = nextStateAfterCloseTag;
                                     nextStateAfterCloseTag = LITERAL_BLOCK;
                                   }
                                   return symbol(LITERAL);
          }
        case 276: break;
        case 76: 
          { yybegin(HTML_ATTRIBUTE_VALUE_2);
                                   return symbol(XML_ATTRIBUTE_VALUE_START_DELIMITER);
          }
        case 277: break;
        case 86: 
          { yybegin(HTML_INITIAL); return symbol(XML_DECL_END);
          }
        case 278: break;
        case 186: 
          { return symbol(XML_DOCTYPE_SYSTEM);
          }
        case 279: break;
        case 123: 
          { return symbol(STRING_PARAMETER_REF, yytext().toString());
          }
        case 280: break;
        case 62: 
          { yypushback(1); yybegin(nextStateAfterString);
          }
        case 281: break;
        case 191: 
          { yypushback(1);
                                   capturedIdentifierType = DELTEMPLATE_IDENTIFIER;
                                   yybegin(closeTag ? CLOSE_TAG : IDENTIFIER_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(DELCALL);
          }
        case 282: break;
        case 37: 
          { yybegin(SOY_TAG);
                                    if (currentNamespace == null) currentNamespace = yytext().toString();
                                    return symbol(NAMESPACE_IDENTIFIER, yytext().toString());
          }
        case 283: break;
        case 152: 
          { return symbol(NOT);
          }
        case 284: break;
        case 55: 
          { yybegin(SOY_TAG); return symbol(UNTERMINATED_STRING_LITERAL);
          }
        case 285: break;
        case 140: 
          { yypushback(1); yybegin(CLOSE_TAG); return symbol(TAB_LITERAL);
          }
        case 286: break;
        case 118: 
          { return symbol(STRING_LITERAL_ESCAPE, "\r");
          }
        case 287: break;
        case 51: 
          { yybegin(DOCS_BOL);
                                   return symbol(DOC_COMMENT_EOL, yytext().toString());
          }
        case 288: break;
        case 99: 
          { if (doubleBraceTag) {
                                     yybegin(CLOSE_TAG); yypushback(2);
                                   } else {
                                     yypushback(1);
                                     return symbol(TAG_RBRACE);
                                   }
          }
        case 289: break;
        case 190: 
          { yypushback(1);
                                   yybegin(CLOSE_TAG);
                                   return symbol(closeTag ? ILLEGAL_CLOSE_TAG : IF_EMPTY);
          }
        case 290: break;
        case 56: 
          { return symbol(BAD_STRING_ESCAPE, "\\");
          }
        case 291: break;
        case 44: 
          { return symbol(DIRECTIVE_PIPE);
          }
        case 292: break;
        case 135: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_DOCTYPE;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 293: break;
        case 185: 
          { return symbol(XML_DOCTYPE_PUBLIC);
          }
        case 294: break;
        case 163: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_DIRECTIVE;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 295: break;
        case 4: 
          { return symbol(RBRACE_ERROR);
          }
        case 296: break;
        case 150: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
          }
        case 297: break;
        case 92: 
          { yybegin(currentCommand == null ? YYINITIAL : HTML_INITIAL);
                                   if (!doubleBraceTag) yypushback(1);
                                   return symbol(RBRACE_ERROR);
          }
        case 298: break;
        case 114: 
          { return symbol(BAD_STRING_ESCAPE, yytext().toString());
          }
        case 299: break;
        case 142: 
          { yypushback(1); yybegin(CLOSE_TAG); return symbol(LF_LITERAL);
          }
        case 300: break;
        case 18: 
          { return symbol(doubleBraceTag ? LBRACE : LBRACE_ERROR);
          }
        case 301: break;
        case 100: 
          { return symbol(GTEQ);
          }
        case 302: break;
        case 125: 
          { yypushback(2); yybegin(nextStateAfterString);
          }
        case 303: break;
        case 85: 
          { yypushback(1);
                                   nextStateAfterCloseTag = HTML_DIRECTIVE;
                                   yybegin(HTML_ATTRIBUTE_VALUE);
          }
        case 304: break;
        case 154: 
          { String text = yytext().toString();
                                   yypushback(2);
                                   return symbol(STRING_LITERAL, text.substring(0, text.length() - 2));
          }
        case 305: break;
        case 66: 
          { nextStateAfterHtmlAttribute = HTML_INITIAL;
                                   yybegin(closeHtml ? HTML_TAG_END : HTML_ATTRIBUTE_NAME);
                                   return symbol(XML_TAG_NAME, yytext());
          }
        case 306: break;
        case 131: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_ATTRIBUTE_NAME;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 307: break;
        case 157: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_ATTRIBUTE_NAME_RESUME;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 308: break;
        case 16: 
          { return symbol(PLUS);
          }
        case 309: break;
        case 198: 
          { yypushback(10); yybegin(currentCommand == null ? YYINITIAL : HTML_INITIAL);
          }
        case 310: break;
        case 145: 
          { yypushback(1); yybegin(CLOSE_TAG); return symbol(RB_LITERAL);
          }
        case 311: break;
        case 168: 
          { yypushback(1); yybegin(CLOSE_TAG); return symbol(NIL_LITERAL);
          }
        case 312: break;
        case 188: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(SWITCH);
          }
        case 313: break;
        case 25: 
          { return symbol(LPAREN);
          }
        case 314: break;
        case 133: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_ATTRIBUTE_VALUE_2;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 315: break;
        case 53: 
          { yybegin(DOCS); return symbol(DOC_COMMENT_IDENTIFIER, yytext().toString());
          }
        case 316: break;
        case 77: 
          { yybegin(HTML_ATTRIBUTE_VALUE_1);
                                   return symbol(XML_ATTRIBUTE_VALUE_START_DELIMITER);
          }
        case 317: break;
        case 119: 
          { return symbol(STRING_LITERAL_ESCAPE, "\n");
          }
        case 318: break;
        case 20: 
          { return symbol(MINUS);
          }
        case 319: break;
        case 8: 
          { yybegin(nextStateAfterCloseTag); return symbol(RBRACE_ERROR);
          }
        case 320: break;
        case 33: 
          { return symbol(LITERAL_TEXT, yytext().toString());
          }
        case 321: break;
        case 19: 
          { if (doubleBraceTag) return symbol(RBRACE);
                                   yybegin(CLOSE_TAG); yypushback(1);
          }
        case 322: break;
        case 126: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_INITIAL;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 323: break;
        case 170: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(FOR);
          }
        case 324: break;
        case 164: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_CDATA;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 325: break;
        case 130: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_ATTRIBUTE_NAME_RESUME;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 326: break;
        case 89: 
          { yypushback(1);
                                   yybegin(nextStateAfterWhitespace);
          }
        case 327: break;
        case 39: 
          { yybegin(SOY_TAG);
                                   currentTemplate = yytext().toString();
                                   return symbol(DELTEMPLATE_IDENTIFIER, currentTemplate);
          }
        case 328: break;
        case 47: 
          { yybegin(DOCS_BOL); return symbol(DOC_COMMENT_EOL);
          }
        case 329: break;
        case 73: 
          { nextStateAfterHtmlAttribute = HTML_ATTRIBUTE_NAME;
                                   yybegin(HTML_ATTRIBUTE_VALUE);
                                   return symbol(XML_EQ);
          }
        case 330: break;
        case 104: 
          { return symbol(ELVIS);
          }
        case 331: break;
        case 69: 
          { yybegin(HTML_ATTRIBUTE_EQ); return symbol(XML_NAME);
          }
        case 332: break;
        case 115: 
          { return symbol(STRING_LITERAL_ESCAPE, "\\");
          }
        case 333: break;
        case 187: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(closeTag ? ILLEGAL_CLOSE_TAG : ELSE_IF);
          }
        case 334: break;
        case 31: 
          { yybegin(TAG_DIRECTIVE); return symbol(DIRECTIVE_PIPE);
          }
        case 335: break;
        case 149: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().toString()));
          }
        case 336: break;
        case 110: 
          { yybegin(YYINITIAL); return symbol(DOC_COMMENT_END, yytext().toString());
          }
        case 337: break;
        case 52: 
          { nextStateAfterWhitespace = yystate();
                                   yybegin(AFTER_WHITESPACE);
                                   return symbol(DOC_COMMENT_WHITESPACE, yytext().toString());
          }
        case 338: break;
        case 35: 
          { yybegin(SOY_TAG);
                                    if (currentNamespace == null) currentNamespace = yytext().toString();
                                    return symbol(PACKAGE_IDENTIFIER, yytext().toString());
          }
        case 339: break;
        case 182: 
          { yypushback(1);
                                   capturedIdentifierType = PARAMETER_REF;
                                   yybegin(closeTag ? CLOSE_TAG : IDENTIFIER_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(PARAM);
          }
        case 340: break;
        case 161: 
          { yybegin(HTML_INITIAL); return symbol(XML_COMMENT_END);
          }
        case 341: break;
        case 196: 
          { yybegin(HTML_DOCTYPE);
                                   return symbol(XML_DOCTYPE_START);
          }
        case 342: break;
        case 148: 
          { if (!doubleBraceTag) yypushback(1);
                                   yybegin(CLOSE_TAG); yypushback(3);
          }
        case 343: break;
        case 54: 
          { String text = yytext().toString();
                                   boolean foundBrace = false;
                                   for (int i = 0, l = text.length(); i < l && !foundBrace; ++i) {
                                       char c = text.charAt(i);
                                       foundBrace = c == '{' || c == '}';
                                   }
                                   if (foundBrace) {
                                       yypushback(text.length());
                                       if (doubleBraceTag) {
                                           yybegin(STRING_IN_DOUBLE_BRACES);
                                       } else {
                                           yybegin(STRING_IN_SINGLE_BRACES);
                                       }
                                   } else {
                                       return symbol(STRING_LITERAL, yytext().toString());
                                   }
          }
        case 344: break;
        case 48: 
          { return symbol(DOC_COMMENT_WHITESPACE);
          }
        case 345: break;
        case 17: 
          { nextStateAfterString = yystate();
                                   yybegin(STRING);
                                   stringTerminator = yytext().charAt(0);
                                   return symbol(STRING_LITERAL_BEGIN, yytext().toString());
          }
        case 346: break;
        case 40: 
          { yybegin(SOY_TAG);
                                   return symbol(LET_IDENTIFIER, yytext().toString());
          }
        case 347: break;
        case 88: 
          { return symbol(XML_PCDATA);
          }
        case 348: break;
        case 111: 
          { yybegin(DOCS); yypushback(2);
          }
        case 349: break;
        case 12: 
          { return symbol(MULT);
          }
        case 350: break;
        case 65: 
          { return symbol(XML_BAD_CHARACTER);
          }
        case 351: break;
        case 75: 
          { yybegin(nextStateAfterHtmlAttribute); yypushback(yylength());
          }
        case 352: break;
        case 171: 
          { nextStateAfterString = yystate();
                                   yybegin(STRING_PARAM);
                                   yypushback(yylength() - 1);
                                   return symbol(STRING_LITERAL_BEGIN, yytext().toString());
          }
        case 353: break;
        case 108: 
          { yybegin(SOY_TAG);
                                   currentTemplate = yytext().toString();
                                   return symbol(TEMPLATE_IDENTIFIER, currentTemplate);
          }
        case 354: break;
        case 129: 
          { if (closeHtml) { yypushback(1); return symbol(XML_BAD_CHARACTER); }
                                   yybegin(HTML_INITIAL); return symbol(XML_TAG_END);
          }
        case 355: break;
        case 195: 
          { yybegin(HTML_CDATA);
                                   return symbol(XML_CDATA_START);
          }
        case 356: break;
        case 78: 
          { return symbol(XML_ATTRIBUTE_VALUE_TOKEN, yytext());
          }
        case 357: break;
        case 124: 
          { String text = yytext().toString();
                                   yypushback(1);
                                   return symbol(STRING_LITERAL, text.substring(0, text.length() - 1));
          }
        case 358: break;
        case 106: 
          { return symbol(LTEQ);
          }
        case 359: break;
        case 176: 
          { yypushback(1);
                                   yybegin(CLOSE_TAG);
                                   return symbol(closeTag ? ILLEGAL_CLOSE_TAG : ELSE);
          }
        case 360: break;
        case 94: 
          { yybegin(nextStateAfterCloseTag);
                                   if (!doubleBraceTag) yypushback(1);
                                   return symbol(TAG_RBRACE);
          }
        case 361: break;
        case 71: 
          { yypushback(1); yybegin(HTML_ATTRIBUTE_EQ); return symbol(XML_EQ);
          }
        case 362: break;
        case 2: 
          { nextStateAfterWhitespace = yystate();
                                   yybegin(AFTER_WHITESPACE);
                                   return symbol(WHITESPACE);
          }
        case 363: break;
        case 82: 
          { return symbol(XML_NAME);
          }
        case 364: break;
        case 159: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_ATTRIBUTE_VALUE_1;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 365: break;
        case 60: 
          { yypushback(1); yybegin(STRING);
          }
        case 366: break;
        case 178: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(closeTag ? ILLEGAL_CLOSE_TAG : CASE);
          }
        case 367: break;
        case 74: 
          { yypushback(1);
                                   yybegin(nextStateAfterHtmlAttribute);
          }
        case 368: break;
        case 173: 
          { return symbol(NULL_LITERAL);
          }
        case 369: break;
        case 166: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : LET_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(LET);
          }
        case 370: break;
        case 134: 
          { return symbol(XML_ATTRIBUTE_VALUE_TOKEN);
          }
        case 371: break;
        case 105: 
          { return symbol(EQEQ);
          }
        case 372: break;
        case 192: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(closeTag ? ILLEGAL_CLOSE_TAG : DEFAULT);
          }
        case 373: break;
        case 120: 
          { return symbol(STRING_LITERAL_ESCAPE, "\f");
          }
        case 374: break;
        case 181: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(closeTag ? ILLEGAL_CLOSE_TAG : PRINT);
          }
        case 375: break;
        case 96: 
          { if (doubleBraceTag) { yypushback(1); return symbol(DIV); }
                                   yybegin(CLOSE_TAG); yypushback(2);
          }
        case 376: break;
        case 98: 
          { Matcher matcher = MATCH_NON_IDENTIFIER_CHAR.matcher(yytext());
                                   if (matcher.find()) {
                                     yypushback(yylength() - matcher.start());
                                   }
                                   String ident = yytext().toString();
                                   if ("for".equals(currentCommand) && "range".equals(ident)) return symbol(RANGE);
                                   if ("in".equals(ident) && ("for".equals(currentCommand) || "foreach".equals(currentCommand))) {
                                     return symbol(IN);
                                   }
                                   if (EXPRESSION_TOKENS.containsKey(ident)) {
                                     return EXPRESSION_TOKENS.get(ident).toSymbol(this, ident);
                                   }
                                   return symbol(CAPTURED_FUNCTION_IDENTIFIER, ident);
          }
        case 377: break;
        case 30: 
          { return symbol(MOD);
          }
        case 378: break;
        case 5: 
          { yybegin(SOY_TAG);
                                   currentCommand = "";
                                   yypushback(1);
                                   return symbol(PRINT_IMPLICIT);
          }
        case 379: break;
        case 93: 
          { if (!doubleBraceTag) {
                                     yybegin(nextStateAfterCloseTag);
                                     return symbol(TAG_END_RBRACE);
                                   }
                                   yypushback(1);
                                   return symbol(DIV);
          }
        case 380: break;
        case 172: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(true));
          }
        case 381: break;
        case 167: 
          { yypushback(1);
                                   yybegin(closeTag ? CLOSE_TAG : SOY_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(closeTag ? ILLEGAL_CLOSE_TAG : CSS);
          }
        case 382: break;
        case 72: 
          { yypushback(1); yybegin(HTML_ATTRIBUTE_NAME);
          }
        case 383: break;
        case 117: 
          { return symbol(STRING_LITERAL_ESCAPE, "\t");
          }
        case 384: break;
        case 64: 
          { nextStateAfterWhitespace = yystate();
                                   yybegin(AFTER_WHITESPACE);
                                   return symbol(XML_WHITE_SPACE);
          }
        case 385: break;
        case 141: 
          { yypushback(1); yybegin(CLOSE_TAG); return symbol(CR_LITERAL);
          }
        case 386: break;
        case 22: 
          { return symbol(RBRACK);
          }
        case 387: break;
        case 95: 
          { return symbol(COMMENT, yytext().toString());
          }
        case 388: break;
        case 177: 
          { yypushback(1);
                                   capturedIdentifierType = TEMPLATE_IDENTIFIER;
                                   yybegin(closeTag ? CLOSE_TAG : IDENTIFIER_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   return symbol(CALL);
          }
        case 389: break;
        case 147: 
          { yybegin(nextStateAfterCloseTag);
                                   if (!doubleBraceTag) yypushback(1);
                                   return symbol(TAG_END_RBRACE);
          }
        case 390: break;
        case 175: 
          { yybegin(HTML_COMMENT);
                                   return symbol(XML_COMMENT_START);
          }
        case 391: break;
        case 11: 
          { return symbol(DIV);
          }
        case 392: break;
        case 57: 
          { if (stringTerminator == yytext().charAt(0)) {
                                       yybegin(nextStateAfterString);
                                       return symbol(STRING_LITERAL_END, yytext().toString());
                                   } else {
                                       return symbol(STRING_LITERAL, yytext().toString());
                                   }
          }
        case 393: break;
        case 3: 
          { return symbol(LBRACE_ERROR);
          }
        case 394: break;
        case 63: 
          { return symbol(XML_DATA_CHARACTERS, yytext());
          }
        case 395: break;
        case 38: 
          { yybegin(SOY_TAG); yypushback(yylength());
          }
        case 396: break;
        case 121: 
          { return symbol(STRING_LITERAL_ESCAPE, "\b");
          }
        case 397: break;
        case 199: 
          { yypushback(1);
                                   yybegin(DELPACKAGE_TAG);
                                   currentCommand = closeTag ? null : yytext().toString();
                                   nextStateAfterCloseTag = YYINITIAL;
                                   return symbol(closeTag ? ILLEGAL_TAG_DECLARATION : DELPACKAGE);
          }
        case 398: break;
        case 27: 
          { return symbol(QUESTION);
          }
        case 399: break;
        case 162: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = true;
                                   doubleBraceTag = yylength() == 3;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_DOCTYPE;
                                   tagStartLine = yyline;
                                   return symbol(TAG_END_LBRACE, yytext().toString());
          }
        case 400: break;
        case 136: 
          { yybegin(OPEN_TAG);
                                   yypushback(1);
                                   closeTag = false;
                                   doubleBraceTag = yylength() == 2;
                                   currentCommand = null;
                                   nextStateAfterCloseTag = HTML_DIRECTIVE;
                                   tagStartLine = yyline;
                                   return symbol(TAG_LBRACE, yytext().toString());
          }
        case 401: break;
        case 179: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(false));
          }
        case 402: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case HTML_COMMENT: {
              yybegin(YYINITIAL);
            }
            case 598: break;
            case HTML_ATTRIBUTE_NAME_RESUME: {
              yybegin(YYINITIAL);
            }
            case 599: break;
            case HTML_CDATA: {
              yybegin(YYINITIAL);
            }
            case 600: break;
            case AFTER_WHITESPACE: {
              yybegin(YYINITIAL);
            }
            case 601: break;
            case HTML_ATTRIBUTE_VALUE_2: {
              yybegin(YYINITIAL);
            }
            case 602: break;
            case HTML_ATTRIBUTE_VALUE_1: {
              yybegin(YYINITIAL);
            }
            case 603: break;
            case LITERAL_BLOCK: {
              yybegin(YYINITIAL);
            }
            case 604: break;
            case HTML_TAG_START: {
              yybegin(YYINITIAL);
            }
            case 605: break;
            case SOY_TAG: {
              yybegin(YYINITIAL);
            }
            case 606: break;
            case HTML_DOCTYPE: {
              yybegin(YYINITIAL);
            }
            case 607: break;
            case STRING_IN_SINGLE_BRACES: {
              yybegin(STRING);
            }
            case 608: break;
            case TEMPLATE_TAG: {
              yybegin(YYINITIAL);
            }
            case 609: break;
            case CLOSE_TAG: {
              yybegin(YYINITIAL);
            }
            case 610: break;
            case STRING: {
              yybegin(YYINITIAL);
            }
            case 611: break;
            case NAMESPACE_TAG: {
              yybegin(YYINITIAL);
            }
            case 612: break;
            case HTML_INITIAL: {
              yybegin(YYINITIAL);
            }
            case 613: break;
            case HTML_ATTRIBUTE_VALUE: {
              yybegin(YYINITIAL);
            }
            case 614: break;
            case DOCS_BOL: {
              yybegin(YYINITIAL);
            }
            case 615: break;
            case HTML_ATTRIBUTE_EQ: {
              yybegin(YYINITIAL);
            }
            case 616: break;
            case DOCS_IDENT: {
              yybegin(YYINITIAL);
            }
            case 617: break;
            case DELPACKAGE_TAG: {
              yybegin(YYINITIAL);
            }
            case 618: break;
            case TAG_DIRECTIVE: {
              yybegin(YYINITIAL);
            }
            case 619: break;
            case IDENTIFIER_TAG: {
              yybegin(YYINITIAL);
            }
            case 620: break;
            case HTML_DIRECTIVE: {
              yybegin(YYINITIAL);
            }
            case 621: break;
            case DOCS: {
              yybegin(YYINITIAL);
            }
            case 622: break;
            case YYINITIAL: {
              return null;
            }
            case 623: break;
            case OPEN_TAG: {
              yybegin(YYINITIAL);
            }
            case 624: break;
            case LET_TAG: {
              yybegin(YYINITIAL);
            }
            case 625: break;
            case HTML_ATTRIBUTE_NAME: {
              yybegin(YYINITIAL);
            }
            case 626: break;
            case STRING_IN_DOUBLE_BRACES: {
              yybegin(STRING);
            }
            case 627: break;
            case HTML_TAG_END: {
              yybegin(YYINITIAL);
            }
            case 628: break;
            case DELTEMPLATE_TAG: {
              yybegin(YYINITIAL);
            }
            case 629: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
