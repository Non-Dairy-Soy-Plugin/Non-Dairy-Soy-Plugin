/*
 * Copyright 2010 - 2013 Ed Venaglia
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * If there any weird cases that come up while developing, testing or bug
 * fixing, this file should be amended with a snippet that reproduces the issue.
 * By adding tricky little things in here, we can be sure that automated tests
 * keep them from resurfacing.
 */

{namespace edge.cases.soy autoescape="contextual"}

{namespace edge.cases.soy2}

/**
* Tests support for orphaned soy docs
*/

/**
* Tests support for undefined parameters
*/
{template .directiveArguments}
    {$dummyNotDefined += 42}
{/template}

/*
 * A template without proper soy docs
 */
{template .no_docs}
Hello world
{/template}

/**
 * Checking support for invalid section tags
 * @param dummy some parameter
 */
{template .no_docs}

    {switch $dummy}
    {case 1}
    {default}
    {case 2}
    {default}
    {/switch}

    {if}
    {elseif}
    {else}
    {elseif}
    {/if}

    {ifempty}

    {param :foo}value{/param}

{/template}

/**
 * Checking support for incomplete tags
 */
{template .incompleteTags1}

    {

{/template}

/**
 * Checking support for incomplete tags
 */
{template .incompleteTags2}

    {call .foo data='
    {}

{/template}

/**
 * Checking support for incomplete tags
 */
{template .incompleteTags3}

    {call .foo data='}
    {}

{/template}

/**
 * Checking support for incomplete tags
 */
{template .incompleteTags4}

    {if}
    {if //}
    {if}

{/template}

/**
 * Checking support for incomplete tags
 */
{template .incompleteTags5}

    {for $i in range(
    {/for}

{/template}

/**
 * Checking support for incomplete tags
 */
{template .incompleteTags6}

    {call .foo data='\
    {}

{/template}


/**
 * Checking support for unmatched tags
 * @param var1
 * @param var2
 * @param var3
 */
{template .unmatchedTags1}
    <span class="test">
    {call .foo}{param bar}
        {if $var1 == 1}
          {$var2}
        {elseif $var1 == 0}
          Nothing found
        {else}
          {$var3}
        {/if}
    {/param}{/call}
    </span>
{/template}

{template .badLetTag}
{let}
{let $noClose}
{let $noColon/}
{let $noValue:/}
{let $:'bad name'/}
{let badName:0/}
{/template}

{template .unclosedTemplate1}
dummy content
// {/template}

/**
 */
{template .unclosdTemplate2}
dummy content
{/template}
