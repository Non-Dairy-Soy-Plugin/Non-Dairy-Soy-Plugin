#
# Copyright 2010 - 2013 Ed Venaglia
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

#Text strings for the non-dairy IntelliJ Idea Plugin

syntax.color_editor.title=Closure Templates
syntax.color_editor.category.command=Command
syntax.color_editor.category.keyword=Keyword
syntax.color_editor.category.special_char=Special Character
syntax.color_editor.category.namespace=File Namespace
syntax.color_editor.category.template.identifier=Template Identifier
syntax.color_editor.category.template.content=Template Content
syntax.color_editor.category.parameter=Template Parameter
syntax.color_editor.category.function=Function Name
syntax.color_editor.category.doc_comment=Doc Comment
syntax.color_editor.category.doc_comment.tag=Doc Comment Tag
syntax.color_editor.category.doc_comment.identifier=Doc Comment Parameter
syntax.color_editor.category.directive=Directive
syntax.color_editor.category.directive.operator=Directive Operator
syntax.color_editor.category.string=String
syntax.color_editor.category.number=Number
syntax.color_editor.category.operator=Operator
syntax.color_editor.category.tag_braces=Tag Braces
syntax.color_editor.category.braces=Braces
syntax.color_editor.category.brackets=Brackets
syntax.color_editor.category.parentheses=Parentheses
syntax.color_editor.category.illegal=Illegal Characters
syntax.color_editor.category.ignore=Ignored Text

soy.language.display_name=Closure Template
soy.file_type.display_name=Closure Template
soy.file_type.description=Closure template file

lexer.error.unexpected.token=Unexpected token {0} sent by lexer

syntax.error.command.not.closable=Illegal close tag for command: {0}
syntax.error.invalid.tag.declaration=Invalid tag declaration: {0}
syntax.error.string.literal.double.quotes=Cannot use double quotes for string literals
syntax.error.expected.boolean_expression=Boolean expression expected
syntax.error.expected.command=Closure command expected
syntax.error.expected.name=Name expected
syntax.error.expected.expression=Expression expected
syntax.error.expected.directive=Directive expected
syntax.error.expected.colon.in.ternary=Missing colon in ternary expression
syntax.error.expected.colon.after.let.name=Colon expected after variable name
syntax.error.expected.colon.after.parameter.name=Colon expected after parameter name
syntax.error.expected.let.name=Missing variable name in let command
syntax.error.expected.let.value=Missing value for variable {0}
syntax.error.expected.parameter.declaration=Missing named parameter declaration
syntax.error.expected.keyword.in=Missing ''in'' keyword
syntax.error.expected.keyword.range=Missing ''range'' keyword
syntax.error.expected.parameter.name=Parameter name expected
syntax.error.expected.parameter.value=Missing parameter value
syntax.error.expected.string.key.in.literal=Key in object literal must be a string
syntax.error.expected.template.definition=Template name must start with a ''.''
syntax.error.inconvertable.expression=Cannot convert expression of {0} type to a {1}
syntax.error.orphaned.section.tag=Encountered a '{'{0}'}' but no enclosing '{'{1}'}'
syntax.error.duplicate.section.tag=Duplicate '{'{0}'}' found in '{'{1}'}'
syntax.error.out-of-order.section.tag=Encountered '{'{0}'}' out of order
syntax.error.unexpected.close.tag=Close tag '{'{0}'}' without a begin tag
syntax.error.unexpected.colon.in.literal=Unexpected colon in literal expression
syntax.error.unexpected.comma.in.literal=Unexpected comma in literal expression
syntax.error.unexpected.eof=Unexpected end of file
syntax.error.unexpected.range.parameter=Too many parameters to ''range'' expression
syntax.error.unexpected.tokens.in.declaration.tag=Unexpected token in {0} declaration
syntax.error.unexpected.tokens.in.literal=Unexpected token {0} in literal expression
syntax.error.unexpected.tokens.in.tag=Unexpected token in {0} tag
syntax.error.unexpected.tokens.in.unknown.tag=Unexpected token in tag
syntax.error.missing.range.parameter=Missing parameters to ''range'' expression
syntax.error.unterminated.string.literal=Unterminated string literal
syntax.error.unclosed.open.tag=Tag is not closed
syntax.error.invalid.close.tag=Invalid close tag
syntax.error.invalid.function.parameter.list=Invalid parameter list
syntax.error.invalid.let.variable.name=Invalid variable name: {0}
syntax.error.unspecified=An unspecified error has occurred

syntax.expression.type.any=unknown
syntax.expression.type.object=object
syntax.expression.type.string=string
syntax.expression.type.number=number
syntax.expression.type.boolean=boolean
syntax.expression.type.unknown=unknown

assertion.error.too.many.enum.values=Too many values defined in {0}: {1}
assertion.error.value.cannot.be.null={0} cannot be null
assertion.error.values.not.equal=Values not equal - Expected: <{0}> Actual: <{1}>

find.usage.type.variable=variable
find.usage.type.function=soy function
find.usage.type.template=soy template
find.usage.type.property=property

inspection.group.title=Closure templates
inspection.unused.parameter.label=Unused parameters
inspection.unused.parameter.message=Unused parameter ''{0}''
inspection.unused.parameter.fix=Remove Unused Parameter ''{0}''
inspection.unused.parameter.description=Detects when a parameter is declared in template docs, but not used anywhere in that template.
inspection.undeclared.parameter.label=Undeclared parameters
inspection.undeclared.parameter.message=Parameter ''{0}'' is not declared
inspection.undeclared.parameter.fix=Add Parameter ''{0}'' to Declaration
inspection.undeclared.parameter.description=Detects when a parameter is used in a template and is not declared in template docs.
inspection.parameter.name.conflict.label=Parameter Already Declared
inspection.parameter.name.conflict.message=Parameter ''{0}'' is already declared
inspection.parameter.name.conflict.description=Detects when a parameter is declared in a foreach or let command, but has previously been declared.
inspection.undeclared.call.parameter.label=Undeclared parameters in call
inspection.undeclared.call.parameter.message=Parameter ''{0}'' is not declared
inspection.undeclared.call.parameter.fix=Add Parameter ''{0}'' to Declaration
inspection.undeclared.call.parameter.description=Detects call and delcall commands that refer to undefined template names.
inspection.msg.in.iterator.label=Msg command in iterator
inspection.msg.in.iterator.message=Msg command cannot be properly localized when within an iterator.
inspection.msg.in.iterator.description=Cosure templates do not support placing <b>msg</b> commands inside iterator commands.<br/><br/>\
These structures tend to represent lists which cannot be properly localized. This inspection detects these errors and alerts the developer.<br/><br/>\
For example, the folowing would trigger this inspection:
inspection.msg.without.description.label=Msg without description
inspection.msg.without.description.message=Msg command should have a ''desc'' attribute for translators.
inspection.msg.without.description.description=Msg tags should always provide a description to aid translators. This inspection finds those that are missingn one.
inspection.call.missing.param.label=Call missing required param
inspection.call.missing.param.message=Call to {0} should specify a value for parameter {1}.
inspection.call.missing.param.description=Detects when a call is made, but a required parameter is missing.
inspection.call.undeclared.template.label=Call undeclared template
inspection.call.undeclared.template.message=Template {0} could not be found.
inspection.call.undeclared.template.description=Detects call and delcall commands that refer to undefined template names.
inspection.unused.alias.label=Unused Alias
inspection.unused.alias.message=Unused '{'alias'}' ''{0}''
inspection.unused.alias.fix=Remove Unused Alias ''{0}''
inspection.unused.alias.description=Detects when an alias command is not used by any call command in the file.
inspection.unnecessary.alias.label=Unnecessary Alias
inspection.unnecessary.alias.message=Unnecessary '{'alias'}' ''{0}''
inspection.unnecessary.alias.fix=Remove Unnecessary Alias ''{0}''
inspection.unnecessary.alias.description=Detects when a duplicate alias command is present, or when it aliases the current namespace.

cache.debugger.format.default.namespace={0} for default namespace
cache.debugger.format.namespace={0} for '{'namespace {1}'}'
cache.debugger.format.alias={0} for '{'alias {1}'}'
cache.debugger.format.module={0} for module ''{1}''
