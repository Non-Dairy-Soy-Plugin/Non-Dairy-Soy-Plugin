
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 24 18:49:36 PST 2014
//----------------------------------------------------

package net.venaglia.nondairy.soylang.lexer.cupparser;

import java_cup.runtime.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.expr.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.tag.*;
import net.venaglia.nondairy.soylang.lexer.*;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 24 18:49:36 PST 2014
  */
public class SoyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SoyParser() {super();}

  /** Constructor which sets the default scanner. */
  public SoyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SoyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\007" +
    "\000\002\002\006\000\002\002\006\000\002\002\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\005\004\000\002\005\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\105\003\000\002\105\004" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\104\003\000\002\104\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\007\006\000" +
    "\002\007\007\000\002\007\005\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\010\006\000\002\010" +
    "\005\000\002\014\004\000\002\014\003\000\002\012\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\016" +
    "\005\000\002\016\004\000\002\016\006\000\002\017\006" +
    "\000\002\017\007\000\002\017\006\000\002\017\007\000" +
    "\002\020\005\000\002\025\005\000\002\050\005\000\002" +
    "\061\005\000\002\042\006\000\002\042\007\000\002\042" +
    "\006\000\002\042\007\000\002\026\005\000\002\026\004" +
    "\000\002\026\005\000\002\051\006\000\002\051\005\000" +
    "\002\062\005\000\002\027\005\000\002\027\004\000\002" +
    "\027\010\000\002\027\006\000\002\027\005\000\002\052" +
    "\010\000\002\052\006\000\002\052\005\000\002\063\005" +
    "\000\002\032\004\000\002\032\005\000\002\032\004\000" +
    "\002\032\005\000\002\032\004\000\002\032\005\000\002" +
    "\032\006\000\002\032\005\000\002\036\005\000\002\036" +
    "\004\000\002\036\005\000\002\036\004\000\002\035\005" +
    "\000\002\035\004\000\002\035\005\000\002\035\004\000" +
    "\002\053\006\000\002\053\005\000\002\043\006\000\002" +
    "\043\005\000\002\044\005\000\002\064\005\000\002\033" +
    "\005\000\002\033\004\000\002\033\005\000\002\033\004" +
    "\000\002\033\005\000\002\033\004\000\002\033\006\000" +
    "\002\033\005\000\002\040\005\000\002\040\004\000\002" +
    "\040\005\000\002\040\004\000\002\037\005\000\002\037" +
    "\004\000\002\037\005\000\002\037\004\000\002\054\006" +
    "\000\002\054\005\000\002\065\005\000\002\045\006\000" +
    "\002\045\005\000\002\046\005\000\002\034\007\000\002" +
    "\034\006\000\002\034\006\000\002\034\005\000\002\034" +
    "\005\000\002\034\004\000\002\034\005\000\002\055\006" +
    "\000\002\055\005\000\002\066\005\000\002\047\005\000" +
    "\002\072\005\000\002\030\005\000\002\030\004\000\002" +
    "\030\005\000\002\056\006\000\002\067\005\000\002\073" +
    "\004\000\002\074\007\000\002\041\005\000\002\041\004" +
    "\000\002\041\006\000\002\041\007\000\002\041\005\000" +
    "\002\060\004\000\002\060\007\000\002\060\006\000\002" +
    "\060\007\000\002\060\006\000\002\060\006\000\002\060" +
    "\005\000\002\071\005\000\002\075\004\000\002\075\004" +
    "\000\002\075\003\000\002\031\005\000\002\031\004\000" +
    "\002\031\010\000\002\031\006\000\002\031\005\000\002" +
    "\057\010\000\002\057\006\000\002\057\005\000\002\070" +
    "\005\000\002\076\003\000\002\076\004\000\002\077\005" +
    "\000\002\077\007\000\002\100\003\000\002\100\004\000" +
    "\002\101\003\000\002\101\003\000\002\103\006\000\002" +
    "\107\003\000\002\107\005\000\002\113\003\000\002\113" +
    "\003\000\002\113\003\000\002\102\004\000\002\023\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\106\003\000\002\106\005\000\002\115" +
    "\005\000\002\115\007\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\006\000" +
    "\002\110\005\000\002\110\004\000\002\110\004\000\002" +
    "\110\006\000\002\110\005\000\002\110\003\000\002\110" +
    "\003\000\002\110\004\000\002\110\005\000\002\110\005" +
    "\000\002\110\005\000\002\110\007\000\002\114\004\000" +
    "\002\114\003\000\002\114\004\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\005\000\002\114" +
    "\005\000\002\116\005\000\002\116\004\000\002\117\004" +
    "\000\002\117\004\000\002\117\004\000\002\117\003\000" +
    "\002\117\003\000\002\117\003\000\002\120\003\000\002" +
    "\120\003\000\002\120\003\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\111\004\000\002" +
    "\111\004\000\002\111\005\000\002\112\004\000\002\112" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\005" +
    "\000\002\015\004\000\002\015\003\000\002\015\003\000" +
    "\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a5\000\012\005\010\007\004\014\007\015\006\001" +
    "\002\000\004\055\u01a2\001\002\000\016\005\ufff4\007\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\024\ufff4\001\002\000\020\002" +
    "\ufff2\005\ufff2\007\ufff2\014\ufff2\015\ufff2\016\ufff2\024\ufff2" +
    "\001\002\000\020\002\ufff3\005\ufff3\007\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\024\ufff3\001\002\000\020\002\ufff1\005\ufff1" +
    "\007\ufff1\014\ufff1\015\ufff1\016\ufff1\024\ufff1\001\002\000" +
    "\012\005\010\007\004\014\007\015\006\001\002\000\004" +
    "\002\u0199\001\002\000\016\005\010\007\017\014\007\015" +
    "\006\016\022\024\023\001\002\000\016\005\010\007\017" +
    "\014\007\015\006\016\022\024\023\001\002\000\004\007" +
    "\033\001\002\000\014\004\143\007\127\011\130\014\144" +
    "\015\150\001\002\000\006\040\036\056\112\001\002\000" +
    "\016\005\uffda\007\uffda\014\uffda\015\uffda\016\uffda\024\uffda" +
    "\001\002\000\022\015\105\016\106\017\107\021\103\022" +
    "\110\023\102\024\111\025\104\001\002\000\022\015\uffcd" +
    "\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\001\002\000\022\015\uffcc\016\uffcc\017\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\001\002\000\020\002" +
    "\ufffd\005\010\007\033\014\007\015\006\016\022\024\023" +
    "\001\002\000\020\002\uffd6\005\uffd6\007\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\024\uffd6\001\002\000\016\005\010\007\017" +
    "\014\007\015\006\016\022\024\023\001\002\000\020\002" +
    "\ufff6\005\ufff6\007\ufff6\014\ufff6\015\ufff6\016\ufff6\024\ufff6" +
    "\001\002\000\016\005\010\007\017\014\007\015\006\016" +
    "\022\024\023\001\002\000\016\005\ufff5\007\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\024\ufff5\001\002\000\020\002\ufffe\005" +
    "\010\007\033\014\007\015\006\016\022\024\023\001\002" +
    "\000\004\040\036\001\002\000\020\002\ufff8\005\ufff8\007" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\024\ufff8\001\002\000\020" +
    "\002\ufff7\005\ufff7\007\ufff7\014\ufff7\015\ufff7\016\ufff7\024" +
    "\ufff7\001\002\000\012\033\041\034\040\151\043\163\037" +
    "\001\002\000\010\010\074\012\073\035\045\001\002\000" +
    "\010\010\uff02\035\uff02\151\uff02\001\002\000\010\010\uff03" +
    "\035\uff03\151\uff03\001\002\000\010\010\047\035\045\151" +
    "\051\001\002\000\004\035\044\001\002\000\010\010\uff04" +
    "\035\uff04\151\uff04\001\002\000\004\124\055\001\002\000" +
    "\010\010\uff55\012\uff55\035\uff55\001\002\000\014\004\uffc8" +
    "\007\uffc8\011\uffc8\014\uffc8\015\uffc8\001\002\000\006\010" +
    "\054\035\045\001\002\000\004\035\052\001\002\000\010" +
    "\010\uff01\035\uff01\151\uff01\001\002\000\010\010\uff54\012" +
    "\uff54\035\uff54\001\002\000\014\004\uffc7\007\uffc7\011\uffc7" +
    "\014\uffc7\015\uffc7\001\002\000\004\110\057\001\002\000" +
    "\010\010\uff53\012\uff53\035\uff53\001\002\000\014\030\062" +
    "\111\060\112\064\113\063\156\061\001\002\000\072\010" +
    "\uff20\012\uff20\035\uff20\077\uff20\101\uff20\116\uff20\117\uff20" +
    "\120\uff20\121\uff20\125\uff20\126\uff20\127\uff20\131\uff20\132" +
    "\uff20\133\uff20\134\uff20\135\uff20\136\uff20\137\uff20\140\uff20" +
    "\141\uff20\142\uff20\144\uff20\145\uff20\146\uff20\147\uff20\151" +
    "\uff20\152\uff20\001\002\000\012\111\uff1a\112\uff1a\113\uff1a" +
    "\156\uff1a\001\002\000\004\111\072\001\002\000\012\111" +
    "\uff1b\112\uff1b\113\uff1b\156\uff1b\001\002\000\012\111\uff1c" +
    "\112\uff1c\113\uff1c\156\uff1c\001\002\000\012\111\066\112" +
    "\071\113\070\156\067\001\002\000\072\010\uff21\012\uff21" +
    "\035\uff21\077\uff21\101\uff21\116\uff21\117\uff21\120\uff21\121" +
    "\uff21\125\uff21\126\uff21\127\uff21\131\uff21\132\uff21\133\uff21" +
    "\134\uff21\135\uff21\136\uff21\137\uff21\140\uff21\141\uff21\142" +
    "\uff21\144\uff21\145\uff21\146\uff21\147\uff21\151\uff21\152\uff21" +
    "\001\002\000\012\111\uff1d\112\uff1d\113\uff1d\156\uff1d\001" +
    "\002\000\012\111\uff1e\112\uff1e\113\uff1e\156\uff1e\001\002" +
    "\000\012\111\uff1f\112\uff1f\113\uff1f\156\uff1f\001\002\000" +
    "\010\010\uff52\012\uff52\035\uff52\001\002\000\020\002\uffc9" +
    "\005\uffc9\007\uffc9\014\uffc9\015\uffc9\016\uffc9\024\uffc9\001" +
    "\002\000\014\004\uffc6\007\uffc6\011\uffc6\014\uffc6\015\uffc6" +
    "\001\002\000\006\010\076\035\045\001\002\000\014\004" +
    "\uffc5\007\uffc5\011\uffc5\014\uffc5\015\uffc5\001\002\000\016" +
    "\005\uffdb\007\uffdb\014\uffdb\015\uffdb\016\uffdb\024\uffdb\001" +
    "\002\000\016\005\uffdc\007\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\024\uffdc\001\002\000\020\002\ufffa\005\010\007\033\014" +
    "\007\015\006\016\022\024\023\001\002\000\022\015\uffcf" +
    "\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\001\002\000\022\015\uffd1\016\uffd1\017\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\001\002\000\004\007" +
    "\uffd5\001\002\000\022\015\uffce\016\uffce\017\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\001\002\000\022\015" +
    "\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\001\002\000\022\015\uffd3\016\uffd3\017\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\001\002\000\022" +
    "\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\001\002\000\022\015\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\001\002\000" +
    "\006\032\113\162\114\001\002\000\004\010\115\001\002" +
    "\000\016\005\uffd8\007\uffd8\014\uffd8\015\uffd8\016\uffd8\024" +
    "\uffd8\001\002\000\016\005\uffd9\007\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\024\uffd9\001\002\000\014\004\143\007\127\011" +
    "\u0164\014\144\015\150\001\002\000\014\004\uffe9\007\uffe9" +
    "\011\uffe9\014\uffe9\015\uffe9\001\002\000\014\004\143\007" +
    "\357\011\343\014\144\015\150\001\002\000\014\004\uffe8" +
    "\007\uffe8\011\uffe8\014\uffe8\015\uffe8\001\002\000\014\004" +
    "\uffe1\007\uffe1\011\uffe1\014\uffe1\015\uffe1\001\002\000\014" +
    "\004\143\007\u0163\011\u0164\014\144\015\150\001\002\000" +
    "\014\004\uffe0\007\uffe0\011\uffe0\014\uffe0\015\uffe0\001\002" +
    "\000\014\004\uffe7\007\uffe7\011\uffe7\014\uffe7\015\uffe7\001" +
    "\002\000\014\004\143\007\u0176\011\u0177\014\144\015\150" +
    "\001\002\000\044\042\373\043\371\044\u0106\045\374\046" +
    "\372\047\u0102\050\u0109\051\367\057\u0105\060\370\067\u0107" +
    "\070\375\071\366\072\u0100\073\377\074\u0103\075\u0101\001" +
    "\002\000\004\040\u0173\001\002\000\014\004\143\007\u0163" +
    "\011\u0164\014\144\015\150\001\002\000\014\004\143\007" +
    "\127\011\u015c\014\144\015\150\001\002\000\014\004\143" +
    "\007\357\011\343\014\144\015\150\001\002\000\020\002" +
    "\uffca\005\uffca\007\uffca\014\uffca\015\uffca\016\uffca\024\uffca" +
    "\001\002\000\014\004\uffe3\007\uffe3\011\uffe3\014\uffe3\015" +
    "\uffe3\001\002\000\004\006\351\001\002\000\014\004\uffea" +
    "\007\uffea\011\uffea\014\uffea\015\uffea\001\002\000\014\004" +
    "\uffeb\007\uffeb\011\uffeb\014\uffeb\015\uffeb\001\002\000\014" +
    "\004\143\007\127\011\343\014\144\015\150\001\002\000" +
    "\014\004\143\007\127\011\130\014\144\015\150\001\002" +
    "\000\014\004\uffee\007\uffee\011\uffee\014\uffee\015\uffee\001" +
    "\002\000\014\004\uffed\007\uffed\011\uffed\014\uffed\015\uffed" +
    "\001\002\000\014\004\143\007\127\011\335\014\144\015" +
    "\150\001\002\000\014\004\uffe5\007\uffe5\011\uffe5\014\uffe5" +
    "\015\uffe5\001\002\000\014\004\ufff0\007\ufff0\011\ufff0\014" +
    "\ufff0\015\ufff0\001\002\000\014\004\uffec\007\uffec\011\uffec" +
    "\014\uffec\015\uffec\001\002\000\014\004\uffe2\007\uffe2\011" +
    "\uffe2\014\uffe2\015\uffe2\001\002\000\014\004\143\007\127" +
    "\011\326\014\144\015\150\001\002\000\010\004\156\007" +
    "\161\011\163\001\002\000\014\004\uffe6\007\uffe6\011\uffe6" +
    "\014\uffe6\015\uffe6\001\002\000\014\004\uffe4\007\uffe4\011" +
    "\uffe4\014\uffe4\015\uffe4\001\002\000\010\004\uff69\007\uff69" +
    "\011\uff69\001\002\000\010\004\323\007\161\011\163\001" +
    "\002\000\014\004\143\007\127\011\315\014\144\015\150" +
    "\001\002\000\004\053\167\001\002\000\014\004\uff6d\007" +
    "\uff6d\011\uff6d\014\uff6d\015\uff6d\001\002\000\004\051\165" +
    "\001\002\000\010\004\uff5f\007\uff5f\011\uff5f\001\002\000" +
    "\004\010\166\001\002\000\014\004\uff62\007\uff62\011\uff62" +
    "\014\uff62\015\uff62\001\002\000\010\010\172\012\171\027" +
    "\170\001\002\000\010\010\175\012\173\136\174\001\002" +
    "\000\010\004\uff5a\007\uff5a\011\uff5a\001\002\000\014\004" +
    "\uff57\007\uff57\011\uff57\014\uff57\015\uff57\001\002\000\010" +
    "\004\uff5b\007\uff5b\011\uff5b\001\002\000\036\027\210\035" +
    "\207\036\202\104\201\105\204\106\216\107\206\110\177" +
    "\114\205\115\211\116\215\120\213\130\214\144\176\001" +
    "\002\000\014\004\uff58\007\uff58\011\uff58\014\uff58\015\uff58" +
    "\001\002\000\006\106\313\107\312\001\002\000\012\111" +
    "\060\112\064\113\063\156\061\001\002\000\070\010\uff25" +
    "\012\uff25\077\uff25\101\uff25\116\uff25\117\uff25\120\uff25\121" +
    "\uff25\125\uff25\126\uff25\127\uff25\131\uff25\132\uff25\133\uff25" +
    "\134\uff25\135\uff25\136\uff25\137\uff25\140\uff25\141\uff25\142" +
    "\uff25\144\uff25\145\uff25\146\uff25\147\uff25\151\uff25\152\uff25" +
    "\001\002\000\066\010\uff2f\012\uff2f\077\uff2f\116\uff2f\117" +
    "\uff2f\120\uff2f\121\uff2f\125\uff2f\126\uff2f\127\uff2f\131\uff2f" +
    "\132\uff2f\133\uff2f\134\uff2f\135\uff2f\136\uff2f\137\uff2f\140" +
    "\uff2f\141\uff2f\142\uff2f\144\uff2f\145\uff2f\146\uff2f\147\uff2f" +
    "\151\uff2f\152\uff2f\001\002\000\004\116\306\001\002\000" +
    "\066\010\uff30\012\uff30\077\uff30\116\uff30\117\uff30\120\uff30" +
    "\121\uff30\125\uff30\126\uff30\127\uff30\131\uff30\132\uff30\133" +
    "\uff30\134\uff30\135\uff30\136\uff30\137\uff30\140\uff30\141\uff30" +
    "\142\uff30\144\uff30\145\uff30\146\uff30\147\uff30\151\uff30\152" +
    "\uff30\001\002\000\070\010\uff24\012\uff24\077\uff24\101\uff24" +
    "\116\uff24\117\uff24\120\uff24\121\uff24\125\uff24\126\uff24\127" +
    "\uff24\131\uff24\132\uff24\133\uff24\134\uff24\135\uff24\136\uff24" +
    "\137\uff24\140\uff24\141\uff24\142\uff24\144\uff24\145\uff24\146" +
    "\uff24\147\uff24\151\uff24\152\uff24\001\002\000\066\010\uff38" +
    "\012\uff38\077\uff38\116\uff38\117\uff38\120\uff38\121\uff38\125" +
    "\uff38\126\uff38\127\uff38\131\uff38\132\uff38\133\uff38\134\uff38" +
    "\135\uff38\136\uff38\137\uff38\140\uff38\141\uff38\142\uff38\144" +
    "\uff38\145\uff38\146\uff38\147\uff38\151\uff38\152\uff38\001\002" +
    "\000\070\010\uff26\012\uff26\077\uff26\101\uff26\116\uff26\117" +
    "\uff26\120\uff26\121\uff26\125\uff26\126\uff26\127\uff26\131\uff26" +
    "\132\uff26\133\uff26\134\uff26\135\uff26\136\uff26\137\uff26\140" +
    "\uff26\141\uff26\142\uff26\144\uff26\145\uff26\146\uff26\147\uff26" +
    "\151\uff26\152\uff26\001\002\000\066\010\uff3a\012\uff3a\077" +
    "\uff3a\116\uff3a\117\uff3a\120\uff3a\121\uff3a\125\uff3a\126\uff3a" +
    "\127\uff3a\131\uff3a\132\uff3a\133\uff3a\134\uff3a\135\uff3a\136" +
    "\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\144\uff3a\145\uff3a" +
    "\146\uff3a\147\uff3a\151\uff3a\152\uff3a\001\002\000\066\010" +
    "\uff39\012\uff39\077\uff39\116\uff39\117\uff39\120\uff39\121\uff39" +
    "\125\uff39\126\uff39\127\uff39\131\uff39\132\uff39\133\uff39\134" +
    "\uff39\135\uff39\136\uff39\137\uff39\140\uff39\141\uff39\142\uff39" +
    "\144\uff39\145\uff39\146\uff39\147\uff39\151\uff39\152\uff39\001" +
    "\002\000\066\010\uff37\012\uff37\077\uff37\116\uff37\117\uff37" +
    "\120\uff37\121\uff37\125\uff37\126\uff37\127\uff37\131\uff37\132" +
    "\uff37\133\uff37\134\uff37\135\uff37\136\uff37\137\uff37\140\uff37" +
    "\141\uff37\142\uff37\144\uff37\145\uff37\146\uff37\147\uff37\151" +
    "\uff37\152\uff37\001\002\000\054\010\304\012\305\116\233" +
    "\120\232\125\246\126\234\127\222\131\221\132\226\133" +
    "\223\134\236\135\240\137\237\140\245\141\225\142\224" +
    "\144\243\145\241\146\242\147\220\151\244\001\002\000" +
    "\036\027\210\035\207\036\202\104\201\105\204\106\216" +
    "\107\206\110\177\114\205\115\211\116\215\120\213\130" +
    "\214\144\176\001\002\000\036\027\210\035\207\036\202" +
    "\104\201\105\204\106\216\107\206\110\177\114\205\115" +
    "\211\116\215\120\213\130\214\144\176\001\002\000\036" +
    "\027\210\035\207\036\202\104\201\105\204\106\216\107" +
    "\206\110\177\114\205\115\211\116\215\120\213\130\214" +
    "\144\176\001\002\000\070\010\uff28\012\uff28\077\uff28\101" +
    "\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\126\uff28" +
    "\127\uff28\131\uff28\132\uff28\133\uff28\134\uff28\135\uff28\136" +
    "\uff28\137\uff28\140\uff28\141\uff28\142\uff28\144\uff28\145\uff28" +
    "\146\uff28\147\uff28\151\uff28\152\uff28\001\002\000\052\116" +
    "\233\117\227\120\232\125\246\126\234\127\222\131\221" +
    "\132\226\133\223\134\236\135\240\137\237\140\245\141" +
    "\225\142\224\144\243\145\241\146\242\147\220\151\244" +
    "\001\002\000\036\027\uff15\035\uff15\036\uff15\104\uff15\105" +
    "\uff15\106\uff15\107\uff15\110\uff15\114\uff15\115\uff15\116\uff15" +
    "\120\uff15\130\uff15\144\uff15\001\002\000\036\027\uff0e\035" +
    "\uff0e\036\uff0e\104\uff0e\105\uff0e\106\uff0e\107\uff0e\110\uff0e" +
    "\114\uff0e\115\uff0e\116\uff0e\120\uff0e\130\uff0e\144\uff0e\001" +
    "\002\000\036\027\uff12\035\uff12\036\uff12\104\uff12\105\uff12" +
    "\106\uff12\107\uff12\110\uff12\114\uff12\115\uff12\116\uff12\120" +
    "\uff12\130\uff12\144\uff12\001\002\000\036\027\210\035\207" +
    "\036\202\104\201\105\204\106\216\107\206\110\177\114" +
    "\205\115\211\116\215\120\213\130\214\144\176\001\002" +
    "\000\036\027\uff19\035\uff19\036\uff19\104\uff19\105\uff19\106" +
    "\uff19\107\uff19\110\uff19\114\uff19\115\uff19\116\uff19\120\uff19" +
    "\130\uff19\144\uff19\001\002\000\036\027\uff13\035\uff13\036" +
    "\uff13\104\uff13\105\uff13\106\uff13\107\uff13\110\uff13\114\uff13" +
    "\115\uff13\116\uff13\120\uff13\130\uff13\144\uff13\001\002\000" +
    "\036\027\uff0d\035\uff0d\036\uff0d\104\uff0d\105\uff0d\106\uff0d" +
    "\107\uff0d\110\uff0d\114\uff0d\115\uff0d\116\uff0d\120\uff0d\130" +
    "\uff0d\144\uff0d\001\002\000\066\010\uff2c\012\uff2c\077\uff2c" +
    "\116\uff2c\117\uff2c\120\uff2c\121\uff2c\125\uff2c\126\uff2c\127" +
    "\uff2c\131\uff2c\132\uff2c\133\uff2c\134\uff2c\135\uff2c\136\uff2c" +
    "\137\uff2c\140\uff2c\141\uff2c\142\uff2c\144\uff2c\145\uff2c\146" +
    "\uff2c\147\uff2c\151\uff2c\152\uff2c\001\002\000\066\010\uff34" +
    "\012\uff34\077\uff34\116\uff34\117\uff34\120\uff34\121\uff34\125" +
    "\uff34\126\uff34\127\uff34\131\uff34\132\uff34\133\uff34\134\uff34" +
    "\135\uff34\136\uff34\137\uff34\140\uff34\141\uff34\142\uff34\144" +
    "\uff34\145\uff34\146\uff34\147\uff34\151\uff34\152\uff34\001\002" +
    "\000\066\010\uff33\012\uff33\077\uff33\116\uff33\117\uff33\120" +
    "\uff33\121\uff33\125\uff33\126\uff33\127\uff33\131\uff33\132\uff33" +
    "\133\uff33\134\uff33\135\uff33\136\uff33\137\uff33\140\uff33\141" +
    "\uff33\142\uff33\144\uff33\145\uff33\146\uff33\147\uff33\151\uff33" +
    "\152\uff33\001\002\000\036\027\210\035\207\036\202\104" +
    "\201\105\204\106\216\107\206\110\177\114\205\115\211" +
    "\116\215\120\213\130\214\144\176\001\002\000\040\027" +
    "\210\035\207\036\202\104\201\105\204\106\216\107\206" +
    "\110\177\114\205\115\211\116\215\117\256\120\213\130" +
    "\214\144\176\001\002\000\036\027\uff10\035\uff10\036\uff10" +
    "\104\uff10\105\uff10\106\uff10\107\uff10\110\uff10\114\uff10\115" +
    "\uff10\116\uff10\120\uff10\130\uff10\144\uff10\001\002\000\036" +
    "\027\210\035\207\036\202\104\201\105\204\106\216\107" +
    "\206\110\177\114\205\115\211\116\215\120\213\130\214" +
    "\144\176\001\002\000\006\035\252\106\253\001\002\000" +
    "\036\027\uff11\035\uff11\036\uff11\104\uff11\105\uff11\106\uff11" +
    "\107\uff11\110\uff11\114\uff11\115\uff11\116\uff11\120\uff11\130" +
    "\uff11\144\uff11\001\002\000\036\027\210\035\207\036\202" +
    "\104\201\105\204\106\216\107\206\110\177\114\205\115" +
    "\211\116\215\120\213\130\214\144\176\001\002\000\036" +
    "\027\uff17\035\uff17\036\uff17\104\uff17\105\uff17\106\uff17\107" +
    "\uff17\110\uff17\114\uff17\115\uff17\116\uff17\120\uff17\130\uff17" +
    "\144\uff17\001\002\000\036\027\uff16\035\uff16\036\uff16\104" +
    "\uff16\105\uff16\106\uff16\107\uff16\110\uff16\114\uff16\115\uff16" +
    "\116\uff16\120\uff16\130\uff16\144\uff16\001\002\000\036\027" +
    "\uff18\035\uff18\036\uff18\104\uff18\105\uff18\106\uff18\107\uff18" +
    "\110\uff18\114\uff18\115\uff18\116\uff18\120\uff18\130\uff18\144" +
    "\uff18\001\002\000\006\035\247\106\250\001\002\000\036" +
    "\027\uff0f\035\uff0f\036\uff0f\104\uff0f\105\uff0f\106\uff0f\107" +
    "\uff0f\110\uff0f\114\uff0f\115\uff0f\116\uff0f\120\uff0f\130\uff0f" +
    "\144\uff0f\001\002\000\036\027\uff14\035\uff14\036\uff14\104" +
    "\uff14\105\uff14\106\uff14\107\uff14\110\uff14\114\uff14\115\uff14" +
    "\116\uff14\120\uff14\130\uff14\144\uff14\001\002\000\066\010" +
    "\uff0c\012\uff0c\077\uff0c\116\uff0c\117\uff0c\120\uff0c\121\uff0c" +
    "\125\uff0c\126\uff0c\127\uff0c\131\uff0c\132\uff0c\133\uff0c\134" +
    "\uff0c\135\uff0c\136\uff0c\137\uff0c\140\uff0c\141\uff0c\142\uff0c" +
    "\144\uff0c\145\uff0c\146\uff0c\147\uff0c\151\uff0c\152\uff0c\001" +
    "\002\000\066\010\uff0b\012\uff0b\077\uff0b\116\uff0b\117\uff0b" +
    "\120\uff0b\121\uff0b\125\uff0b\126\uff0b\127\uff0b\131\uff0b\132" +
    "\uff0b\133\uff0b\134\uff0b\135\uff0b\136\uff0b\137\uff0b\140\uff0b" +
    "\141\uff0b\142\uff0b\144\uff0b\145\uff0b\146\uff0b\147\uff0b\151" +
    "\uff0b\152\uff0b\001\002\000\066\010\uff2b\012\uff2b\077\uff2b" +
    "\116\233\117\uff2b\120\232\121\uff2b\125\246\126\234\127" +
    "\222\131\221\132\226\133\uff2b\134\236\135\uff2b\136\uff2b" +
    "\137\237\140\245\141\225\142\224\144\243\145\241\146" +
    "\242\147\220\151\244\152\uff2b\001\002\000\066\010\uff09" +
    "\012\uff09\077\uff09\116\uff09\117\uff09\120\uff09\121\uff09\125" +
    "\uff09\126\uff09\127\uff09\131\uff09\132\uff09\133\uff09\134\uff09" +
    "\135\uff09\136\uff09\137\uff09\140\uff09\141\uff09\142\uff09\144" +
    "\uff09\145\uff09\146\uff09\147\uff09\151\uff09\152\uff09\001\002" +
    "\000\066\010\uff08\012\uff08\077\uff08\116\uff08\117\uff08\120" +
    "\uff08\121\uff08\125\uff08\126\uff08\127\uff08\131\uff08\132\uff08" +
    "\133\uff08\134\uff08\135\uff08\136\uff08\137\uff08\140\uff08\141" +
    "\uff08\142\uff08\144\uff08\145\uff08\146\uff08\147\uff08\151\uff08" +
    "\152\uff08\001\002\000\066\010\uff2d\012\uff2d\077\uff2d\116" +
    "\233\117\uff2d\120\232\121\uff2d\125\246\126\234\127\222" +
    "\131\221\132\226\133\223\134\236\135\240\136\uff2d\137" +
    "\237\140\245\141\225\142\224\144\243\145\241\146\242" +
    "\147\220\151\244\152\uff2d\001\002\000\060\010\uff3e\116" +
    "\233\117\uff3e\120\232\121\uff3e\125\246\126\234\127\222" +
    "\131\221\132\226\133\223\134\236\135\240\137\237\140" +
    "\245\141\225\142\224\144\243\145\241\146\242\147\220" +
    "\151\244\152\uff3e\001\002\000\066\010\uff31\012\uff31\077" +
    "\uff31\116\uff31\117\uff31\120\uff31\121\uff31\125\uff31\126\uff31" +
    "\127\uff31\131\uff31\132\uff31\133\uff31\134\uff31\135\uff31\136" +
    "\uff31\137\uff31\140\uff31\141\uff31\142\uff31\144\uff31\145\uff31" +
    "\146\uff31\147\uff31\151\uff31\152\uff31\001\002\000\006\117" +
    "\261\152\260\001\002\000\036\027\210\035\207\036\202" +
    "\104\201\105\204\106\216\107\206\110\177\114\205\115" +
    "\211\116\215\120\213\130\214\144\176\001\002\000\066" +
    "\010\uff32\012\uff32\077\uff32\116\uff32\117\uff32\120\uff32\121" +
    "\uff32\125\uff32\126\uff32\127\uff32\131\uff32\132\uff32\133\uff32" +
    "\134\uff32\135\uff32\136\uff32\137\uff32\140\uff32\141\uff32\142" +
    "\uff32\144\uff32\145\uff32\146\uff32\147\uff32\151\uff32\152\uff32" +
    "\001\002\000\060\010\uff3d\116\233\117\uff3d\120\232\121" +
    "\uff3d\125\246\126\234\127\222\131\221\132\226\133\223" +
    "\134\236\135\240\137\237\140\245\141\225\142\224\144" +
    "\243\145\241\146\242\147\220\151\244\152\uff3d\001\002" +
    "\000\052\116\233\120\232\121\264\125\246\126\234\127" +
    "\222\131\221\132\226\133\223\134\236\135\240\137\237" +
    "\140\245\141\225\142\224\144\243\145\241\146\242\147" +
    "\220\151\244\001\002\000\066\010\uff0a\012\uff0a\077\uff0a" +
    "\116\uff0a\117\uff0a\120\uff0a\121\uff0a\125\uff0a\126\uff0a\127" +
    "\uff0a\131\uff0a\132\uff0a\133\uff0a\134\uff0a\135\uff0a\136\uff0a" +
    "\137\uff0a\140\uff0a\141\uff0a\142\uff0a\144\uff0a\145\uff0a\146" +
    "\uff0a\147\uff0a\151\uff0a\152\uff0a\001\002\000\052\116\233" +
    "\120\232\125\246\126\234\127\222\131\221\132\226\133" +
    "\223\134\236\135\240\136\266\137\237\140\245\141\225" +
    "\142\224\144\243\145\241\146\242\147\220\151\244\001" +
    "\002\000\036\027\210\035\207\036\202\104\201\105\204" +
    "\106\216\107\206\110\177\114\205\115\211\116\215\120" +
    "\213\130\214\144\176\001\002\000\066\010\uff2a\012\uff2a" +
    "\077\uff2a\116\233\117\uff2a\120\232\121\uff2a\125\246\126" +
    "\234\127\222\131\221\132\226\133\uff2a\134\236\135\uff2a" +
    "\136\uff2a\137\237\140\245\141\225\142\224\144\243\145" +
    "\241\146\242\147\220\151\244\152\uff2a\001\002\000\066" +
    "\010\uff2e\012\uff2e\077\uff2e\116\233\117\uff2e\120\232\121" +
    "\uff2e\125\uff2e\126\uff2e\127\uff2e\131\uff2e\132\uff2e\133\uff2e" +
    "\134\236\135\uff2e\136\uff2e\137\uff2e\140\uff2e\141\uff2e\142" +
    "\uff2e\144\uff2e\145\uff2e\146\uff2e\147\uff2e\151\244\152\uff2e" +
    "\001\002\000\006\121\300\152\277\001\002\000\006\121" +
    "\276\152\260\001\002\000\056\116\uff25\120\uff25\121\uff25" +
    "\125\uff25\126\uff25\127\uff25\131\uff25\132\uff25\133\uff25\134" +
    "\uff25\135\uff25\136\274\137\uff25\140\uff25\141\uff25\142\uff25" +
    "\144\uff25\145\uff25\146\uff25\147\uff25\151\uff25\152\uff25\001" +
    "\002\000\036\027\210\035\207\036\202\104\201\105\204" +
    "\106\216\107\206\110\177\114\205\115\211\116\215\120" +
    "\213\130\214\144\176\001\002\000\054\116\233\120\232" +
    "\121\uff3c\125\246\126\234\127\222\131\221\132\226\133" +
    "\223\134\236\135\240\137\237\140\245\141\225\142\224" +
    "\144\243\145\241\146\242\147\220\151\244\152\uff3c\001" +
    "\002\000\070\010\uff23\012\uff23\077\uff23\101\uff23\116\uff23" +
    "\117\uff23\120\uff23\121\uff23\125\uff23\126\uff23\127\uff23\131" +
    "\uff23\132\uff23\133\uff23\134\uff23\135\uff23\136\uff23\137\uff23" +
    "\140\uff23\141\uff23\142\uff23\144\uff23\145\uff23\146\uff23\147" +
    "\uff23\151\uff23\152\uff23\001\002\000\004\110\177\001\002" +
    "\000\070\010\uff22\012\uff22\077\uff22\101\uff22\116\uff22\117" +
    "\uff22\120\uff22\121\uff22\125\uff22\126\uff22\127\uff22\131\uff22" +
    "\132\uff22\133\uff22\134\uff22\135\uff22\136\uff22\137\uff22\140" +
    "\uff22\141\uff22\142\uff22\144\uff22\145\uff22\146\uff22\147\uff22" +
    "\151\uff22\152\uff22\001\002\000\004\136\302\001\002\000" +
    "\036\027\210\035\207\036\202\104\201\105\204\106\216" +
    "\107\206\110\177\114\205\115\211\116\215\120\213\130" +
    "\214\144\176\001\002\000\054\116\233\120\232\121\uff3b" +
    "\125\246\126\234\127\222\131\221\132\226\133\223\134" +
    "\236\135\240\137\237\140\245\141\225\142\224\144\243" +
    "\145\241\146\242\147\220\151\244\152\uff3b\001\002\000" +
    "\014\004\uff59\007\uff59\011\uff59\014\uff59\015\uff59\001\002" +
    "\000\010\004\uff5c\007\uff5c\011\uff5c\001\002\000\040\027" +
    "\210\035\207\036\202\104\201\105\204\106\216\107\206" +
    "\110\177\114\205\115\211\116\215\117\307\120\213\130" +
    "\214\144\176\001\002\000\066\010\uff35\012\uff35\077\uff35" +
    "\116\uff35\117\uff35\120\uff35\121\uff35\125\uff35\126\uff35\127" +
    "\uff35\131\uff35\132\uff35\133\uff35\134\uff35\135\uff35\136\uff35" +
    "\137\uff35\140\uff35\141\uff35\142\uff35\144\uff35\145\uff35\146" +
    "\uff35\147\uff35\151\uff35\152\uff35\001\002\000\006\117\311" +
    "\152\260\001\002\000\066\010\uff36\012\uff36\077\uff36\116" +
    "\uff36\117\uff36\120\uff36\121\uff36\125\uff36\126\uff36\127\uff36" +
    "\131\uff36\132\uff36\133\uff36\134\uff36\135\uff36\136\uff36\137" +
    "\uff36\140\uff36\141\uff36\142\uff36\144\uff36\145\uff36\146\uff36" +
    "\147\uff36\151\uff36\152\uff36\001\002\000\070\010\uff27\012" +
    "\uff27\077\uff27\101\uff27\116\uff27\117\uff27\120\uff27\121\uff27" +
    "\125\uff27\126\uff27\127\uff27\131\uff27\132\uff27\133\uff27\134" +
    "\uff27\135\uff27\136\uff27\137\uff27\140\uff27\141\uff27\142\uff27" +
    "\144\uff27\145\uff27\146\uff27\147\uff27\151\uff27\152\uff27\001" +
    "\002\000\070\010\uff29\012\uff29\077\uff29\101\uff29\116\uff29" +
    "\117\uff29\120\uff29\121\uff29\125\uff29\126\uff29\127\uff29\131" +
    "\uff29\132\uff29\133\uff29\134\uff29\135\uff29\136\uff29\137\uff29" +
    "\140\uff29\141\uff29\142\uff29\144\uff29\145\uff29\146\uff29\147" +
    "\uff29\151\uff29\152\uff29\001\002\000\010\004\uff5d\007\uff5d" +
    "\011\uff5d\001\002\000\004\053\321\001\002\000\014\004" +
    "\143\007\127\011\315\014\144\015\150\001\002\000\010" +
    "\004\uff5e\007\uff5e\011\uff5e\001\002\000\014\004\uffef\007" +
    "\uffef\011\uffef\014\uffef\015\uffef\001\002\000\004\010\322" +
    "\001\002\000\010\004\uff56\007\uff56\011\uff56\001\002\000" +
    "\010\004\uff61\007\uff61\011\uff61\001\002\000\014\004\uff6e" +
    "\007\uff6e\011\uff6e\014\uff6e\015\uff6e\001\002\000\010\004" +
    "\uff60\007\uff60\011\uff60\001\002\000\004\050\332\001\002" +
    "\000\014\004\143\007\127\011\326\014\144\015\150\001" +
    "\002\000\014\004\uff74\007\uff74\011\uff74\014\uff74\015\uff74" +
    "\001\002\000\014\004\uff75\007\uff75\011\uff75\014\uff75\015" +
    "\uff75\001\002\000\004\010\333\001\002\000\014\004\uff71" +
    "\007\uff71\011\uff71\014\uff71\015\uff71\001\002\000\014\004" +
    "\uffbb\007\uffbb\011\uffbb\014\uffbb\015\uffbb\001\002\000\004" +
    "\043\340\001\002\000\014\004\143\007\127\011\335\014" +
    "\144\015\150\001\002\000\014\004\uffbc\007\uffbc\011\uffbc" +
    "\014\uffbc\015\uffbc\001\002\000\004\010\341\001\002\000" +
    "\014\004\uffb7\007\uffb7\011\uffb7\014\uffb7\015\uffb7\001\002" +
    "\000\020\002\uffcb\005\uffcb\007\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\024\uffcb\001\002\000\004\046\347\001\002\000\014" +
    "\004\uff96\007\uff96\011\uff96\014\uff96\015\uff96\001\002\000" +
    "\014\004\143\007\127\011\343\014\144\015\150\001\002" +
    "\000\014\004\uff97\007\uff97\011\uff97\014\uff97\015\uff97\001" +
    "\002\000\004\010\350\001\002\000\014\004\uff85\007\uff85" +
    "\011\uff85\014\uff85\015\uff85\001\002\000\004\011\353\001" +
    "\002\000\014\004\uffc3\007\uffc3\011\uffc3\014\uffc3\015\uffc3" +
    "\001\002\000\004\042\354\001\002\000\004\010\355\001" +
    "\002\000\014\004\uffc1\007\uffc1\011\uffc1\014\uffc1\015\uffc1" +
    "\001\002\000\014\004\uff8e\007\uff8e\011\uff8e\014\uff8e\015" +
    "\uff8e\001\002\000\050\042\373\043\371\044\u0106\045\374" +
    "\046\372\047\u0102\050\u0109\051\367\057\u0105\060\370\063" +
    "\u0104\064\u0108\067\u0107\070\375\071\366\072\u0100\073\377" +
    "\074\u0103\075\u0101\001\002\000\014\004\uff94\007\uff94\011" +
    "\uff94\014\uff94\015\uff94\001\002\000\014\004\143\007\357" +
    "\011\343\014\144\015\150\001\002\000\014\004\uff8a\007" +
    "\uff8a\011\uff8a\014\uff8a\015\uff8a\001\002\000\014\004\uff8f" +
    "\007\uff8f\011\uff8f\014\uff8f\015\uff8f\001\002\000\014\004" +
    "\uff95\007\uff95\011\uff95\014\uff95\015\uff95\001\002\000\014" +
    "\004\uff8b\007\uff8b\011\uff8b\014\uff8b\015\uff8b\001\002\000" +
    "\004\010\uff43\001\002\000\014\010\u0151\012\u014f\033\u0150" +
    "\034\u014e\035\045\001\002\000\036\027\210\035\207\036" +
    "\202\104\201\105\204\106\216\107\206\110\177\114\205" +
    "\115\211\116\215\120\213\130\214\144\176\001\002\000" +
    "\010\010\u0147\012\u0146\035\045\001\002\000\042\010\u0142" +
    "\012\u0143\027\210\035\207\036\202\104\201\105\204\106" +
    "\216\107\206\110\177\114\205\115\211\116\215\120\213" +
    "\130\214\144\176\001\002\000\004\010\u0140\001\002\000" +
    "\042\010\u013c\012\u013d\027\210\035\207\036\202\104\201" +
    "\105\204\106\216\107\206\110\177\114\205\115\211\116" +
    "\215\120\213\130\214\144\176\001\002\000\004\010\uff44" +
    "\001\002\000\004\010\u013a\001\002\000\004\010\uff41\001" +
    "\002\000\004\010\uff42\001\002\000\004\010\uff3f\001\002" +
    "\000\010\010\u0136\012\u0134\027\u0133\001\002\000\004\010" +
    "\uff40\001\002\000\040\010\u0130\027\210\035\207\036\202" +
    "\104\201\105\204\106\216\107\206\110\177\114\205\115" +
    "\211\116\215\120\213\130\214\144\176\001\002\000\036" +
    "\027\210\035\207\036\202\104\201\105\204\106\216\107" +
    "\206\110\177\114\205\115\211\116\215\120\213\130\214" +
    "\144\176\001\002\000\010\010\u0116\012\u0115\037\u0117\001" +
    "\002\000\004\010\uff45\001\002\000\004\010\u0114\001\002" +
    "\000\006\012\u010b\027\u010a\001\002\000\004\102\u010e\001" +
    "\002\000\014\004\uff73\007\uff73\011\uff73\014\uff73\015\uff73" +
    "\001\002\000\004\010\u010d\001\002\000\014\004\uff72\007" +
    "\uff72\011\uff72\014\uff72\015\uff72\001\002\000\004\103\u0110" +
    "\001\002\000\004\010\uff70\001\002\000\004\116\u0111\001" +
    "\002\000\036\027\210\035\207\036\202\104\201\105\204" +
    "\106\216\107\206\110\177\114\205\115\211\116\215\120" +
    "\213\130\214\144\176\001\002\000\006\117\u0113\152\260" +
    "\001\002\000\004\010\uff6f\001\002\000\014\004\uff82\007" +
    "\uff82\011\uff82\014\uff82\015\uff82\001\002\000\014\004\uffb2" +
    "\007\uffb2\011\uffb2\014\uffb2\015\uffb2\001\002\000\014\004" +
    "\uffaf\007\uffaf\011\uffaf\014\uffaf\015\uffaf\001\002\000\010" +
    "\010\u011a\012\u0118\136\u0119\001\002\000\014\004\uffb3\007" +
    "\uffb3\011\uffb3\014\uffb3\015\uffb3\001\002\000\036\027\210" +
    "\035\207\036\202\104\201\105\204\106\216\107\206\110" +
    "\177\114\205\115\211\116\215\120\213\130\214\144\176" +
    "\001\002\000\014\004\uffb0\007\uffb0\011\uffb0\014\uffb0\015" +
    "\uffb0\001\002\000\054\010\u011c\012\u011d\116\233\120\232" +
    "\125\246\126\234\127\222\131\221\132\226\133\223\134" +
    "\236\135\240\137\237\140\245\141\225\142\224\144\243" +
    "\145\241\146\242\147\220\151\244\001\002\000\014\004" +
    "\uffb1\007\uffb1\011\uffb1\014\uffb1\015\uffb1\001\002\000\014" +
    "\004\uffb4\007\uffb4\011\uffb4\014\uffb4\015\uffb4\001\002\000" +
    "\054\010\u011f\077\u0123\116\233\120\232\125\246\126\234" +
    "\127\222\131\221\132\226\133\223\134\236\135\240\137" +
    "\237\140\245\141\225\142\224\144\243\145\241\146\242" +
    "\147\220\151\244\001\002\000\014\004\uffc0\007\uffc0\011" +
    "\uffc0\014\uffc0\015\uffc0\001\002\000\006\010\uff4f\077\uff4f" +
    "\001\002\000\006\010\u012e\077\u0123\001\002\000\006\010" +
    "\uff51\077\uff51\001\002\000\004\076\u0125\001\002\000\006" +
    "\010\uff4e\077\uff4e\001\002\000\010\010\uff47\077\uff47\100" +
    "\u0126\001\002\000\022\027\u012b\104\u0127\105\204\106\216" +
    "\107\206\110\177\120\213\144\176\001\002\000\010\010" +
    "\uff49\077\uff49\101\uff49\001\002\000\010\010\uff4a\077\uff4a" +
    "\101\uff4a\001\002\000\010\010\uff4d\077\uff4d\101\u012c\001" +
    "\002\000\010\010\uff4c\077\uff4c\101\uff4c\001\002\000\010" +
    "\010\uff48\077\uff48\101\uff48\001\002\000\022\027\u012b\104" +
    "\u0127\105\204\106\216\107\206\110\177\120\213\144\176" +
    "\001\002\000\010\010\uff4b\077\uff4b\101\uff4b\001\002\000" +
    "\014\004\uffbf\007\uffbf\011\uffbf\014\uffbf\015\uffbf\001\002" +
    "\000\006\010\uff50\077\uff50\001\002\000\014\004\uff83\007" +
    "\uff83\011\uff83\014\uff83\015\uff83\001\002\000\006\010\u0132" +
    "\152\260\001\002\000\014\004\uff84\007\uff84\011\uff84\014" +
    "\uff84\015\uff84\001\002\000\004\102\u0138\001\002\000\014" +
    "\004\uff7b\007\uff7b\011\uff7b\014\uff7b\015\uff7b\001\002\000" +
    "\004\010\u0137\001\002\000\014\004\uff79\007\uff79\011\uff79" +
    "\014\uff79\015\uff79\001\002\000\014\004\uff7a\007\uff7a\011" +
    "\uff7a\014\uff7a\015\uff7a\001\002\000\036\027\210\035\207" +
    "\036\202\104\201\105\204\106\216\107\206\110\177\114" +
    "\205\115\211\116\215\120\213\130\214\144\176\001\002" +
    "\000\052\010\uff76\116\233\120\232\125\246\126\234\127" +
    "\222\131\221\132\226\133\223\134\236\135\240\137\237" +
    "\140\245\141\225\142\224\144\243\145\241\146\242\147" +
    "\220\151\244\001\002\000\014\004\uff46\007\uff46\011\uff46" +
    "\014\uff46\015\uff46\001\002\000\054\010\u013e\012\u013f\116" +
    "\233\120\232\125\246\126\234\127\222\131\221\132\226" +
    "\133\223\134\236\135\240\137\237\140\245\141\225\142" +
    "\224\144\243\145\241\146\242\147\220\151\244\001\002" +
    "\000\014\004\uff9c\007\uff9c\011\uff9c\014\uff9c\015\uff9c\001" +
    "\002\000\014\004\uffa6\007\uffa6\011\uffa6\014\uffa6\015\uffa6" +
    "\001\002\000\014\004\uff9d\007\uff9d\011\uff9d\014\uff9d\015" +
    "\uff9d\001\002\000\014\004\uffa7\007\uffa7\011\uffa7\014\uffa7" +
    "\015\uffa7\001\002\000\004\006\uffc2\001\002\000\054\010" +
    "\u0144\012\u0145\116\233\120\232\125\246\126\234\127\222" +
    "\131\221\132\226\133\223\134\236\135\240\137\237\140" +
    "\245\141\225\142\224\144\243\145\241\146\242\147\220" +
    "\151\244\001\002\000\014\004\uff86\007\uff86\011\uff86\014" +
    "\uff86\015\uff86\001\002\000\014\004\uff90\007\uff90\011\uff90" +
    "\014\uff90\015\uff90\001\002\000\014\004\uff87\007\uff87\011" +
    "\uff87\014\uff87\015\uff87\001\002\000\014\004\uff91\007\uff91" +
    "\011\uff91\014\uff91\015\uff91\001\002\000\014\004\uffba\007" +
    "\uffba\011\uffba\014\uffba\015\uffba\001\002\000\014\004\uffb8" +
    "\007\uffb8\011\uffb8\014\uffb8\015\uffb8\001\002\000\006\010" +
    "\u0149\035\045\001\002\000\014\004\uffb9\007\uffb9\011\uffb9" +
    "\014\uffb9\015\uffb9\001\002\000\054\010\u014b\077\u0123\116" +
    "\233\120\232\125\246\126\234\127\222\131\221\132\226" +
    "\133\223\134\236\135\240\137\237\140\245\141\225\142" +
    "\224\144\243\145\241\146\242\147\220\151\244\001\002" +
    "\000\014\004\uffbe\007\uffbe\011\uffbe\014\uffbe\015\uffbe\001" +
    "\002\000\006\010\u014d\077\u0123\001\002\000\014\004\uffbd" +
    "\007\uffbd\011\uffbd\014\uffbd\015\uffbd\001\002\000\006\010" +
    "\u0159\035\045\001\002\000\014\004\uff6a\007\uff6a\011\uff6a" +
    "\014\uff6a\015\uff6a\001\002\000\010\010\u0155\012\u0154\035" +
    "\045\001\002\000\010\004\uff63\007\uff63\011\uff63\001\002" +
    "\000\006\010\u0153\035\045\001\002\000\010\004\uff64\007" +
    "\uff64\011\uff64\001\002\000\014\004\uff6c\007\uff6c\011\uff6c" +
    "\014\uff6c\015\uff6c\001\002\000\010\004\uff67\007\uff67\011" +
    "\uff67\001\002\000\010\010\u0158\012\u0157\035\045\001\002" +
    "\000\014\004\uff6b\007\uff6b\011\uff6b\014\uff6b\015\uff6b\001" +
    "\002\000\010\004\uff68\007\uff68\011\uff68\001\002\000\010" +
    "\004\uff65\007\uff65\011\uff65\001\002\000\006\010\u015b\035" +
    "\045\001\002\000\010\004\uff66\007\uff66\011\uff66\001\002" +
    "\000\004\044\u0160\001\002\000\014\004\143\007\127\011" +
    "\u015c\014\144\015\150\001\002\000\014\004\uffb5\007\uffb5" +
    "\011\uffb5\014\uffb5\015\uffb5\001\002\000\014\004\uffb6\007" +
    "\uffb6\011\uffb6\014\uffb6\015\uffb6\001\002\000\004\010\u0161" +
    "\001\002\000\014\004\uffae\007\uffae\011\uffae\014\uffae\015" +
    "\uffae\001\002\000\014\004\uffa4\007\uffa4\011\uffa4\014\uffa4" +
    "\015\uffa4\001\002\000\050\042\373\043\371\044\u0106\045" +
    "\374\046\372\047\u0102\050\u0109\051\367\057\u0105\060\370" +
    "\061\u016e\062\u016d\067\u0107\070\375\071\366\072\u0100\073" +
    "\377\074\u0103\075\u0101\001\002\000\004\045\u016b\001\002" +
    "\000\014\004\uffab\007\uffab\011\uffab\014\uffab\015\uffab\001" +
    "\002\000\014\004\143\007\u0163\011\u0164\014\144\015\150" +
    "\001\002\000\014\004\uffa0\007\uffa0\011\uffa0\014\uffa0\015" +
    "\uffa0\001\002\000\014\004\uffa5\007\uffa5\011\uffa5\014\uffa5" +
    "\015\uffa5\001\002\000\014\004\uffaa\007\uffaa\011\uffaa\014" +
    "\uffaa\015\uffaa\001\002\000\014\004\uffa1\007\uffa1\011\uffa1" +
    "\014\uffa1\015\uffa1\001\002\000\004\010\u016c\001\002\000" +
    "\014\004\uff98\007\uff98\011\uff98\014\uff98\015\uff98\001\002" +
    "\000\004\010\u0172\001\002\000\040\010\u0170\027\210\035" +
    "\207\036\202\104\201\105\204\106\216\107\206\110\177" +
    "\114\205\115\211\116\215\120\213\130\214\144\176\001" +
    "\002\000\052\010\u0171\116\233\120\232\125\246\126\234" +
    "\127\222\131\221\132\226\133\223\134\236\135\240\137" +
    "\237\140\245\141\225\142\224\144\243\145\241\146\242" +
    "\147\220\151\244\001\002\000\014\004\uff9a\007\uff9a\011" +
    "\uff9a\014\uff9a\015\uff9a\001\002\000\014\004\uff9b\007\uff9b" +
    "\011\uff9b\014\uff9b\015\uff9b\001\002\000\014\004\uff99\007" +
    "\uff99\011\uff99\014\uff99\015\uff99\001\002\000\004\010\u0174" +
    "\001\002\000\020\002\uffc4\005\uffc4\007\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\024\uffc4\001\002\000\014\004\uff7c\007\uff7c" +
    "\011\uff7c\014\uff7c\015\uff7c\001\002\000\046\042\373\043" +
    "\371\044\u0106\045\374\046\372\047\u0102\050\u0109\051\367" +
    "\057\u0105\060\370\065\u0184\067\u0107\070\375\071\366\072" +
    "\u0100\073\377\074\u0103\075\u0101\001\002\000\004\047\u0182" +
    "\001\002\000\014\004\143\007\u0176\011\u0177\014\144\015" +
    "\150\001\002\000\014\004\143\007\127\011\u0177\014\144" +
    "\015\150\001\002\000\014\004\uff7e\007\uff7e\011\uff7e\014" +
    "\uff7e\015\uff7e\001\002\000\014\004\143\007\127\011\u0177" +
    "\014\144\015\150\001\002\000\014\004\uff7f\007\uff7f\011" +
    "\uff7f\014\uff7f\015\uff7f\001\002\000\014\004\uff7d\007\uff7d" +
    "\011\uff7d\014\uff7d\015\uff7d\001\002\000\014\004\143\007" +
    "\127\011\u0177\014\144\015\150\001\002\000\014\004\uff80" +
    "\007\uff80\011\uff80\014\uff80\015\uff80\001\002\000\014\004" +
    "\143\007\127\011\u0177\014\144\015\150\001\002\000\014" +
    "\004\uff81\007\uff81\011\uff81\014\uff81\015\uff81\001\002\000" +
    "\004\010\u0183\001\002\000\014\004\uff78\007\uff78\011\uff78" +
    "\014\uff78\015\uff78\001\002\000\004\010\u0185\001\002\000" +
    "\014\004\uff77\007\uff77\011\uff77\014\uff77\015\uff77\001\002" +
    "\000\014\004\uffa2\007\uffa2\011\uffa2\014\uffa2\015\uffa2\001" +
    "\002\000\014\004\uffa9\007\uffa9\011\uffa9\014\uffa9\015\uffa9" +
    "\001\002\000\014\004\143\007\u0163\011\u0164\014\144\015" +
    "\150\001\002\000\014\004\uff9e\007\uff9e\011\uff9e\014\uff9e" +
    "\015\uff9e\001\002\000\014\004\uffa3\007\uffa3\011\uffa3\014" +
    "\uffa3\015\uffa3\001\002\000\014\004\uffa8\007\uffa8\011\uffa8" +
    "\014\uffa8\015\uffa8\001\002\000\014\004\uff9f\007\uff9f\011" +
    "\uff9f\014\uff9f\015\uff9f\001\002\000\014\004\uff8c\007\uff8c" +
    "\011\uff8c\014\uff8c\015\uff8c\001\002\000\014\004\uff92\007" +
    "\uff92\011\uff92\014\uff92\015\uff92\001\002\000\014\004\143" +
    "\007\357\011\343\014\144\015\150\001\002\000\014\004" +
    "\uff88\007\uff88\011\uff88\014\uff88\015\uff88\001\002\000\014" +
    "\004\uff8d\007\uff8d\011\uff8d\014\uff8d\015\uff8d\001\002\000" +
    "\014\004\uff93\007\uff93\011\uff93\014\uff93\015\uff93\001\002" +
    "\000\014\004\uff89\007\uff89\011\uff89\014\uff89\015\uff89\001" +
    "\002\000\014\004\uffad\007\uffad\011\uffad\014\uffad\015\uffad" +
    "\001\002\000\014\004\143\007\127\011\u0164\014\144\015" +
    "\150\001\002\000\014\004\uffac\007\uffac\011\uffac\014\uffac" +
    "\015\uffac\001\002\000\020\002\uffd7\005\uffd7\007\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\024\uffd7\001\002\000\020\002\ufff9" +
    "\005\010\007\033\014\007\015\006\016\022\024\023\001" +
    "\002\000\004\002\000\001\002\000\016\005\010\007\017" +
    "\014\007\015\006\016\022\024\023\001\002\000\016\005" +
    "\010\007\017\014\007\015\006\016\022\024\023\001\002" +
    "\000\020\002\uffff\005\010\007\033\014\007\015\006\016" +
    "\022\024\023\001\002\000\016\005\010\007\017\014\007" +
    "\015\006\016\022\024\023\001\002\000\016\005\010\007" +
    "\017\014\007\015\006\016\022\024\023\001\002\000\020" +
    "\002\001\005\010\007\033\014\007\015\006\016\022\024" +
    "\023\001\002\000\020\002\ufffc\005\010\007\033\014\007" +
    "\015\006\016\022\024\023\001\002\000\020\002\ufffb\005" +
    "\010\007\033\014\007\015\006\016\022\024\023\001\002" +
    "\000\006\032\u01a3\162\u01a4\001\002\000\006\010\u01a5\035" +
    "\045\001\002\000\016\005\uffdd\007\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\024\uffdd\001\002\000\016\005\uffdf\007\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\024\uffdf\001\002\000\006\010\u01a7" +
    "\035\045\001\002\000\016\005\uffde\007\uffde\014\uffde\015" +
    "\uffde\016\uffde\024\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a5\000\012\002\011\005\010\006\004\007\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\030\007" +
    "\u0199\001\001\000\002\001\001\000\026\003\023\004\013" +
    "\005\025\006\004\010\017\012\014\013\020\014\026\016" +
    "\024\017\015\001\001\000\022\003\u0197\006\077\010\076" +
    "\012\014\013\020\014\026\016\024\017\015\001\001\000" +
    "\006\016\u0196\017\015\001\001\000\070\020\133\021\136" +
    "\022\116\023\123\025\120\026\124\027\137\030\134\032" +
    "\153\033\145\034\154\035\130\036\115\037\132\040\140" +
    "\041\150\042\121\050\135\051\144\052\131\053\122\054" +
    "\117\055\125\056\151\060\152\104\146\105\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\033\012\014" +
    "\013\020\014\034\016\024\017\015\001\001\000\002\001" +
    "\001\000\024\003\031\004\027\006\030\010\017\012\014" +
    "\013\020\014\026\016\024\017\015\001\001\000\002\001" +
    "\001\000\022\003\100\006\077\010\076\012\014\013\020" +
    "\014\026\016\024\017\015\001\001\000\002\001\001\000" +
    "\016\006\033\012\014\013\020\014\034\016\024\017\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\041\001\001\000\006\076\074\077\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\076" +
    "\047\077\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\055\001" +
    "\001\000\002\001\001\000\004\117\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\033\012\014\013\020\014\034" +
    "\016\024\017\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\021\136\022\116\023\123\025\120\026" +
    "\124\027\137\030\134\032\153\033\145\034\154\035\130" +
    "\036\115\037\132\040\140\041\150\042\121\050\135\051" +
    "\144\052\131\053\122\054\117\055\125\056\151\060\152" +
    "\064\u0193\104\146\105\u0194\001\001\000\002\001\001\000" +
    "\074\021\136\022\116\023\123\025\120\026\124\027\137" +
    "\030\134\032\153\033\145\034\154\035\130\036\115\037" +
    "\132\040\140\041\150\042\121\045\u018f\046\u018c\050\135" +
    "\051\144\052\131\053\122\054\117\055\125\056\151\060" +
    "\152\065\u018d\104\146\105\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\021\136\022\116\023\123\025" +
    "\120\026\124\027\137\030\134\032\153\033\145\034\154" +
    "\035\130\036\115\037\132\040\140\041\150\042\121\043" +
    "\u0188\044\u0185\050\135\051\144\052\131\053\122\054\117" +
    "\055\125\056\151\060\152\064\u0186\104\146\105\u0187\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\021\136" +
    "\022\116\023\123\025\120\026\124\027\137\030\134\032" +
    "\153\033\145\034\154\035\130\036\115\037\132\040\140" +
    "\041\150\042\121\047\u0178\050\135\051\144\052\131\053" +
    "\122\054\117\055\125\056\151\060\152\066\u0174\104\146" +
    "\105\u0177\001\001\000\004\024\375\001\001\000\002\001" +
    "\001\000\074\021\136\022\116\023\123\025\120\026\124" +
    "\027\137\030\134\032\153\033\145\034\154\035\130\036" +
    "\115\037\132\040\140\041\150\042\121\043\u0166\044\u0161" +
    "\050\135\051\144\052\131\053\122\054\117\055\125\056" +
    "\151\060\152\064\u0164\104\146\105\u0165\001\001\000\070" +
    "\021\136\022\116\023\123\025\120\026\124\027\137\030" +
    "\134\032\153\033\145\034\154\035\130\036\115\037\132" +
    "\040\140\041\150\042\121\050\135\051\144\052\131\053" +
    "\122\054\117\055\125\056\151\060\152\063\u015d\104\146" +
    "\105\u015c\001\001\000\074\021\136\022\116\023\123\025" +
    "\120\026\124\027\137\030\134\032\153\033\145\034\154" +
    "\035\130\036\115\037\132\040\140\041\150\042\121\045" +
    "\361\046\355\050\135\051\144\052\131\053\122\054\117" +
    "\055\125\056\151\060\152\065\357\104\146\105\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\021\136\022" +
    "\116\023\123\025\120\026\124\027\137\030\134\032\153" +
    "\033\145\034\154\035\130\036\115\037\132\040\140\041" +
    "\150\042\121\050\135\051\144\052\131\053\122\054\117" +
    "\055\125\056\151\060\152\065\343\104\146\105\344\001" +
    "\001\000\066\020\341\021\136\022\116\023\123\025\120" +
    "\026\124\027\137\030\134\032\153\033\145\034\154\035" +
    "\130\036\115\037\132\040\140\041\150\042\121\050\135" +
    "\051\144\052\131\053\122\054\117\055\125\056\151\060" +
    "\152\104\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\021\136\022\116\023\123\025\120\026\124\027" +
    "\137\030\134\032\153\033\145\034\154\035\130\036\115" +
    "\037\132\040\140\041\150\042\121\050\135\051\144\052" +
    "\131\053\122\054\117\055\125\056\151\060\152\062\333" +
    "\104\146\105\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\021\136" +
    "\022\116\023\123\025\120\026\124\027\137\030\134\032" +
    "\153\033\145\034\154\035\130\036\115\037\132\040\140" +
    "\041\150\042\121\050\135\051\144\052\131\053\122\054" +
    "\117\055\125\056\151\060\152\067\327\104\146\105\326" +
    "\001\001\000\012\031\163\057\157\071\161\075\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\324\057\157\071\323\001\001\000\070\021" +
    "\136\022\116\023\123\025\120\026\124\027\137\030\134" +
    "\032\153\033\145\034\154\035\130\036\115\037\132\040" +
    "\140\041\150\042\121\050\135\051\144\052\131\053\122" +
    "\054\117\055\125\056\151\060\152\070\313\104\146\105" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\110\211\114" +
    "\202\116\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\111\227\112\230" +
    "\120\234\001\001\000\014\106\271\110\254\114\202\115" +
    "\270\116\272\001\001\000\010\110\267\114\202\116\177" +
    "\001\001\000\010\110\216\114\202\116\177\001\001\000" +
    "\002\001\001\000\010\111\227\112\230\120\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\110\264\114\202\116\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\110\262\114\202" +
    "\116\177\001\001\000\012\106\256\110\254\114\202\116" +
    "\177\001\001\000\002\001\001\000\010\110\253\114\202" +
    "\116\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\110\250\114\202\116\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\111\227\112\230\120\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\111\227\112\230" +
    "\120\234\001\001\000\010\111\227\112\230\120\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\110\261" +
    "\114\202\116\177\001\001\000\002\001\001\000\010\111" +
    "\227\112\230\120\234\001\001\000\010\111\227\112\230" +
    "\120\234\001\001\000\002\001\001\000\010\111\227\112" +
    "\230\120\234\001\001\000\010\110\266\114\202\116\177" +
    "\001\001\000\010\111\227\112\230\120\234\001\001\000" +
    "\010\111\227\112\230\120\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\110\274\114" +
    "\202\116\177\001\001\000\010\111\227\112\230\120\234" +
    "\001\001\000\002\001\001\000\004\116\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\110\302\114\202" +
    "\116\177\001\001\000\010\111\227\112\230\120\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\106\307" +
    "\110\254\114\202\116\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\021" +
    "\136\022\116\023\123\025\120\026\124\027\137\030\134" +
    "\032\153\033\145\034\154\035\130\036\115\037\132\040" +
    "\140\041\150\042\121\050\135\051\144\052\131\053\122" +
    "\054\117\055\125\056\151\060\152\070\316\104\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\021\136\022\116" +
    "\023\123\025\120\026\124\027\137\030\134\032\153\033" +
    "\145\034\154\035\130\036\115\037\132\040\140\041\150" +
    "\042\121\050\135\051\144\052\131\053\122\054\117\055" +
    "\125\056\151\060\152\067\330\104\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\021\136" +
    "\022\116\023\123\025\120\026\124\027\137\030\134\032" +
    "\153\033\145\034\154\035\130\036\115\037\132\040\140" +
    "\041\150\042\121\050\135\051\144\052\131\053\122\054" +
    "\117\055\125\056\151\060\152\062\336\104\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\021\136\022\116\023\123\025\120\026\124\027\137\030" +
    "\134\032\153\033\145\034\154\035\130\036\115\037\132" +
    "\040\140\041\150\042\121\050\135\051\144\052\131\053" +
    "\122\054\117\055\125\056\151\060\152\065\345\104\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\375\001\001\000\002\001\001\000\072" +
    "\021\136\022\116\023\123\025\120\026\124\027\137\030" +
    "\134\032\153\033\145\034\154\035\130\036\115\037\132" +
    "\040\140\041\150\042\121\045\364\046\362\050\135\051" +
    "\144\052\131\053\122\054\117\055\125\056\151\060\152" +
    "\065\363\104\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\076\u0151\077\045\001\001\000\010\110\u0149\114" +
    "\202\116\177\001\001\000\006\076\u0147\077\045\001\001" +
    "\000\010\110\u0140\114\202\116\177\001\001\000\002\001" +
    "\001\000\010\110\u013a\114\202\116\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\u0134\001\001\000\002" +
    "\001\001\000\012\106\u0130\110\254\114\202\116\177\001" +
    "\001\000\010\110\u011d\114\202\116\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\u010b\001\001\000\004\074\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\106\u0111\110\254" +
    "\114\202\116\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\110\u011a\114" +
    "\202\116\177\001\001\000\002\001\001\000\010\111\227" +
    "\112\230\120\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\100\u0120\101\u0121\102\u0123\103\u011f\111\227" +
    "\112\230\120\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\101\u012e\102\u0123\103\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\107\u0128\113\u0129\114\u0127\116\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\113\u012c\114\u0127" +
    "\116\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\110\u0138" +
    "\114\202\116\177\001\001\000\010\111\227\112\230\120" +
    "\234\001\001\000\002\001\001\000\010\111\227\112\230" +
    "\120\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\111\227\112\230\120\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\052\001\001\000" +
    "\002\001\001\000\020\100\u014b\101\u0121\102\u0123\103\u011f" +
    "\111\227\112\230\120\234\001\001\000\002\001\001\000" +
    "\010\101\u012e\102\u0123\103\u011f\001\001\000\002\001\001" +
    "\000\006\076\u0159\077\045\001\001\000\002\001\001\000" +
    "\006\076\u0155\077\045\001\001\000\002\001\001\000\004" +
    "\077\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\021\136" +
    "\022\116\023\123\025\120\026\124\027\137\030\134\032" +
    "\153\033\145\034\154\035\130\036\115\037\132\040\140" +
    "\041\150\042\121\050\135\051\144\052\131\053\122\054" +
    "\117\055\125\056\151\060\152\063\u015e\104\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\021\136\022" +
    "\116\023\123\025\120\026\124\027\137\030\134\032\153" +
    "\033\145\034\154\035\130\036\115\037\132\040\140\041" +
    "\150\042\121\043\u0169\044\u0167\050\135\051\144\052\131" +
    "\053\122\054\117\055\125\056\151\060\152\064\u0168\104" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\110\u016e\114\202\116\177" +
    "\001\001\000\010\111\227\112\230\120\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\375\001\001\000\002\001\001\000\070\021\136\022\116" +
    "\023\123\025\120\026\124\027\137\030\134\032\153\033" +
    "\145\034\154\035\130\036\115\037\132\040\140\041\150" +
    "\042\121\047\u017d\050\135\051\144\052\131\053\122\054" +
    "\117\055\125\056\151\060\152\066\u017c\104\317\001\001" +
    "\000\070\021\136\022\116\023\123\025\120\026\124\027" +
    "\137\030\134\032\153\033\145\034\154\035\130\036\115" +
    "\037\132\040\140\041\150\042\121\050\135\051\144\052" +
    "\131\053\122\054\117\055\125\056\151\060\152\066\u0179" +
    "\104\146\105\u017a\001\001\000\002\001\001\000\066\021" +
    "\136\022\116\023\123\025\120\026\124\027\137\030\134" +
    "\032\153\033\145\034\154\035\130\036\115\037\132\040" +
    "\140\041\150\042\121\050\135\051\144\052\131\053\122" +
    "\054\117\055\125\056\151\060\152\066\u017b\104\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\021\136" +
    "\022\116\023\123\025\120\026\124\027\137\030\134\032" +
    "\153\033\145\034\154\035\130\036\115\037\132\040\140" +
    "\041\150\042\121\050\135\051\144\052\131\053\122\054" +
    "\117\055\125\056\151\060\152\066\u017e\104\146\105\u017f" +
    "\001\001\000\002\001\001\000\066\021\136\022\116\023" +
    "\123\025\120\026\124\027\137\030\134\032\153\033\145" +
    "\034\154\035\130\036\115\037\132\040\140\041\150\042" +
    "\121\050\135\051\144\052\131\053\122\054\117\055\125" +
    "\056\151\060\152\066\u0180\104\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\021\136\022\116\023\123\025\120\026\124\027\137" +
    "\030\134\032\153\033\145\034\154\035\130\036\115\037" +
    "\132\040\140\041\150\042\121\043\u018b\044\u0189\050\135" +
    "\051\144\052\131\053\122\054\117\055\125\056\151\060" +
    "\152\064\u018a\104\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\021\136\022\116\023\123" +
    "\025\120\026\124\027\137\030\134\032\153\033\145\034" +
    "\154\035\130\036\115\037\132\040\140\041\150\042\121" +
    "\045\u0192\046\u0190\050\135\051\144\052\131\053\122\054" +
    "\117\055\125\056\151\060\152\065\u0191\104\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\021\136\022\116" +
    "\023\123\025\120\026\124\027\137\030\134\032\153\033" +
    "\145\034\154\035\130\036\115\037\132\040\140\041\150" +
    "\042\121\050\135\051\144\052\131\053\122\054\117\055" +
    "\125\056\151\060\152\064\u0195\104\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\033\012\014\013" +
    "\020\014\034\016\024\017\015\001\001\000\002\001\001" +
    "\000\026\003\u019b\004\u019a\005\u019c\006\004\010\017\012" +
    "\014\013\020\014\026\016\024\017\015\001\001\000\022" +
    "\003\u01a0\006\077\010\076\012\014\013\020\014\026\016" +
    "\024\017\015\001\001\000\016\006\033\012\014\013\020" +
    "\014\034\016\024\017\015\001\001\000\024\003\u019e\004" +
    "\u019d\006\030\010\017\012\014\013\020\014\026\016\024" +
    "\017\015\001\001\000\022\003\u019f\006\077\010\076\012" +
    "\014\013\020\014\026\016\024\017\015\001\001\000\016" +
    "\006\033\012\014\013\020\014\034\016\024\017\015\001" +
    "\001\000\016\006\033\012\014\013\020\014\034\016\024" +
    "\017\015\001\001\000\016\006\033\012\014\013\020\014" +
    "\034\016\024\017\015\001\001\000\002\001\001\000\006" +
    "\076\u01a5\077\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\052\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SoyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SoyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SoyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SoyParser$actions {
  private final SoyParser parser;

  /** Constructor */
  CUP$SoyParser$actions(SoyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SoyParser$do_action(
    int                        CUP$SoyParser$act_num,
    java_cup.runtime.lr_parser CUP$SoyParser$parser,
    java.util.Stack            CUP$SoyParser$stack,
    int                        CUP$SoyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SoyParser$result;

      /* select the action based on the action number */
      switch (CUP$SoyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // template_ident ::= template_ident DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = t + "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // template_ident ::= DELTEMPLATE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // template_ident ::= TEMPLATE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // template_ident ::= DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // namespace_ident ::= namespace_ident DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ns + "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // namespace_ident ::= NAMESPACE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // namespace_ident ::= CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // null_safe_reference ::= QUESTION_DOT INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("null_safe_reference",72, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // null_safe_reference ::= QUESTION_DOT CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("null_safe_reference",72, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // dot_reference ::= LBRACK expr RBRACK 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // dot_reference ::= DOT INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // dot_reference ::= DOT CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // binary_operator ::= OR 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("|"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // binary_operator ::= AND 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("&"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // binary_operator ::= GTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator(">="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // binary_operator ::= GT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator(">"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // binary_operator ::= LTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("<="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // binary_operator ::= LT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("<"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // binary_operator ::= NOTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("!="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // binary_operator ::= EQEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("=="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // binary_operator ::= MOD 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("%"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // binary_operator ::= DIV 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("/"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // binary_operator ::= MULT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("*"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // binary_operator ::= MINUS 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("-"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // binary_operator ::= PLUS 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("+"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",78, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // string_literal_buf ::= BRACE_IN_STRING 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		SoySymbol s = (SoySymbol)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder("{"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",77, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // string_literal_buf ::= STRING_LITERAL_ESCAPE 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",77, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // string_literal_buf ::= STRING_LITERAL 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",77, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // string_literal_buf ::= string_literal_buf BRACE_IN_STRING 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		SoySymbol s = (SoySymbol)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",77, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // string_literal_buf ::= string_literal_buf STRING_LITERAL_ESCAPE 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",77, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // string_literal_buf ::= string_literal_buf STRING_LITERAL 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",77, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // string_literal ::= STRING_LITERAL_BEGIN STRING_LITERAL_END 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal",76, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // string_literal ::= STRING_LITERAL_BEGIN string_literal_buf STRING_LITERAL_END 
            {
              String RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = buf.toString(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal",76, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // literal_value ::= LBRACK key_value_list RBRACK 
            {
              LiteralExpression< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Map<String,Expression> l = (Map<String,Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ObjectLiteralExpression(l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",74, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // literal_value ::= LBRACK expr_list RBRACK 
            {
              LiteralExpression< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ArrayLiteralExpression(l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",74, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // literal_value ::= BOOLEAN_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BooleanLiteralExpression(b); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",74, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // literal_value ::= string_literal 
            {
              LiteralExpression< ? > RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringLiteralExpression(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",74, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // literal_value ::= FLOATING_POINT_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(f); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",74, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // literal_value ::= MINUS FLOATING_POINT_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(0.0 - f); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",74, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // literal_value ::= INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",74, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // literal_value ::= MINUS INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(0 - i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",74, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr ::= expr QUESTION expr COLON expr 
            {
              Expression RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		Expression q = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TernaryOperatorExpression(q,y,n); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr ::= expr ELVIS expr 
            {
              Expression RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression q = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new NullCoalescingExpression(q,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr ::= expr binary_operator expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,op,r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new UnaryOperatorExpression(new UnaryOperator("!"), e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteralExpression(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr ::= literal_value 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		LiteralExpression< ? > v = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr ::= expr LPAREN RPAREN 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		 RESULT = new FunctionCall(f,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr ::= expr LPAREN expr_list RPAREN 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(f,args); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr ::= expr null_safe_reference 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,new BinaryOperator("?."),r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr ::= expr dot_reference 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,new BinaryOperator("."),r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr ::= CAPTURED_FUNCTION_IDENTIFIER LPAREN RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr ::= CAPTURED_FUNCTION_IDENTIFIER LPAREN expr_list RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier(id),l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr ::= EMPTY_OBJECT_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = ObjectLiteralExpression.EMPTY; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr ::= EMPTY_ARRAY_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = ArrayLiteralExpression.EMPTY; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr ::= PARAMETER_REF 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ParameterRef(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr ::= CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // key_value_list ::= key_value_list COMMA string_literal COLON expr 
            {
              Map<String,Expression> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		Map<String,Expression> m = (Map<String,Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 m.put(k,v); RESULT = m; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("key_value_list",75, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // key_value_list ::= string_literal COLON expr 
            {
              Map<String,Expression> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 Map<String,Expression> m = new HashMap<String,Expression>(); m.put(k,v); RESULT = m; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("key_value_list",75, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_list ::= expr_list COMMA expr 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr_list",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_list ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<Expression> l = new LinkedList<Expression>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr_list",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // special_char ::= RB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '}'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // special_char ::= LB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '{'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // special_char ::= TAB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\t'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // special_char ::= LF_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\n'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // special_char ::= CR_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\r'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // special_char ::= NIL_LITERAL 
            {
              Character RESULT =null;
		 RESULT = null; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // special_char ::= SP_LITERAL 
            {
              Character RESULT =null;
		 RESULT = ' '; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // special_char_tag ::= TAG_LBRACE special_char TAG_RBRACE 
            {
              SpecialCharacterTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new SpecialCharacterTag(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char_tag",17, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // simple_directive ::= DIRECTIVE_PIPE DIRECTIVE_IDENTIFIER 
            {
              Directive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Directive(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("simple_directive",64, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // dir_expr ::= PARAMETER_REF 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ParameterRef(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",73, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // dir_expr ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteralExpression(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",73, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // dir_expr ::= literal_value 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		LiteralExpression< ? > e = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",73, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // dir_expr_list ::= dir_expr_list DIRECTIVE_COMMA dir_expr 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr_list",69, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // dir_expr_list ::= dir_expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<Expression> l = new LinkedList<Expression>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr_list",69, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // compound_directive ::= DIRECTIVE_PIPE DIRECTIVE_IDENTIFIER DIRECTIVE_COLON dir_expr_list 
            {
              Directive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Directive(i, l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("compound_directive",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // directive ::= simple_directive 
            {
              Directive RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive d = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive",63, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // directive ::= compound_directive 
            {
              Directive RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive d = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive",63, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // directive_list ::= directive_list directive 
            {
              List<Directive> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive dir = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(dir); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive_list",62, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // directive_list ::= directive 
            {
              List<Directive> RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive dir = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<Directive> l = new LinkedList<Directive>(); l.add(dir); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive_list",62, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // attribute ::= CAPTURED_IDENTIFIER EQ STRING_LITERAL_BEGIN STRING_PARAMETER_REF STRING_LITERAL_END 
            {
              Attribute RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new Attribute(name,new ParameterRef(val)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // attribute ::= CAPTURED_IDENTIFIER EQ string_literal 
            {
              Attribute RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Attribute(name,new StringLiteralExpression(val)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // attribute_list ::= attribute_list attribute 
            {
              List<Attribute> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> l = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(att); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute_list",60, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // attribute_list ::= attribute 
            {
              List<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<Attribute> l = new LinkedList<Attribute>(); l.add(att); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute_list",60, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // end_param_tag ::= TAG_END_LBRACE PARAM TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("param"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_param_tag",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // begin_param_tag ::= TAG_LBRACE PARAM TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginParamTag(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",45, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // begin_param_tag ::= TAG_LBRACE PARAM PARAMETER_REF TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginParamTag(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",45, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // begin_param_tag ::= TAG_LBRACE PARAM PARAMETER_REF COLON expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginParamTag(id,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",45, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // param_tag ::= TAG_LBRACE PARAM TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginParamTag(null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // param_tag ::= TAG_LBRACE PARAM PARAMETER_REF TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginParamTag(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // param_tag ::= TAG_LBRACE PARAM PARAMETER_REF COLON expr TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginParamTag(id,e),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // param_tag ::= begin_param_tag end_param_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // param_tag ::= begin_param_tag content_sequence end_param_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // param_list ::= param_tag 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair p = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<ContentWrapper<?>> l = new LinkedList<ContentWrapper<?>>(); l.add(ContentWrapper.create(p)); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",59, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // param_list ::= param_list param_tag 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair p = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(ContentWrapper.create(p)); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",59, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // param_list ::= param_list TEMPLATE_TEXT 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",59, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // end_call_tag ::= TAG_END_LBRACE CALL TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("call"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_call_tag",55, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // begin_call_tag ::= TAG_LBRACE CALL TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		 RESULT = new BeginCallTag(null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // begin_call_tag ::= TAG_LBRACE CALL attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // begin_call_tag ::= TAG_LBRACE CALL DELTEMPLATE_IDENTIFIER TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // begin_call_tag ::= TAG_LBRACE CALL DELTEMPLATE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // begin_call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // begin_call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // begin_call_tag ::= begin_call_tag TEMPLATE_TEXT 
            {
              BeginCallTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = b; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // call_tag ::= TAG_LBRACE CALL TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		 RESULT = new TemplateCall(new BeginCallTag(null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",31, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER attribute_list TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateCall(new BeginCallTag(id,att),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",31, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateCall(new BeginCallTag(id,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",31, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // call_tag ::= begin_call_tag end_call_tag 
            {
              TemplateCall RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateCall(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",31, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // call_tag ::= begin_call_tag param_list end_call_tag 
            {
              TemplateCall RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> p = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateCall(b,e,p); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",31, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // for_range ::= IN RANGE LPAREN expr_list RPAREN 
            {
              FunctionCall RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier("range"),l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_range",58, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // for_seq ::= PARAMETER_REF for_range 
            {
              IterableSequence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		FunctionCall r = (FunctionCall)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IterableSequence(new CapturedIdentifier(p),r.getArgs()); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_seq",57, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // end_for_tag ::= TAG_END_LBRACE FOR TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("for"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_for_tag",53, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // begin_for_tag ::= TAG_LBRACE FOR for_seq TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		IterableSequence seq = (IterableSequence)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginIteratorTag("for",seq,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_for_tag",44, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // for_tag ::= TAG_LBRACE FOR TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new UnaryTag("for")); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // for_tag ::= begin_for_tag end_for_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // for_tag ::= begin_for_tag content_sequence end_for_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // foreach_seq ::= PARAMETER_REF IN expr 
            {
              IterableSequence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IterableSequence(new CapturedIdentifier(p),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_seq",56, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ifempty_tag ::= TAG_LBRACE IF_EMPTY TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("ifempty"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("ifempty_tag",37, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // end_foreach_tag ::= TAG_END_LBRACE FOREACH TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("foreach"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_foreach_tag",52, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // begin_foreach_tag ::= TAG_LBRACE FOREACH TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginIteratorTag("foreach",null,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_foreach_tag",43, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // begin_foreach_tag ::= TAG_LBRACE FOREACH foreach_seq TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		IterableSequence seq = (IterableSequence)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginIteratorTag("foreach",seq,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_foreach_tag",43, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // foreach_tag ::= TAG_LBRACE FOREACH TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("foreach"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // foreach_tag ::= begin_foreach_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // foreach_tag ::= begin_foreach_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // foreach_tag ::= begin_foreach_tag ifempty_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(ie),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // foreach_tag ::= begin_foreach_tag ifempty_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(ie).append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // foreach_tag ::= begin_foreach_tag content_sequence ifempty_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(l).append(ie),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // foreach_tag ::= begin_foreach_tag content_sequence ifempty_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		List<ContentWrapper< ? >> l1 = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l2 = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(l1).append(ie).append(l2),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // default_tag ::= TAG_LBRACE DEFAULT TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("default"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("default_tag",36, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // case_tag ::= TAG_LBRACE CASE TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("case"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("case_tag",35, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // case_tag ::= TAG_LBRACE CASE expr_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("case",l,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("case_tag",35, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // end_switch_tag ::= TAG_END_LBRACE SWITCH TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("switch"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_switch_tag",51, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // begin_switch_tag ::= TAG_LBRACE SWITCH TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("switch",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_switch_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // begin_switch_tag ::= TAG_LBRACE SWITCH expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("switch",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_switch_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // open_switch_tag ::= begin_switch_tag case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // open_switch_tag ::= begin_switch_tag content_sequence case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // open_switch_tag ::= open_switch_tag case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // open_switch_tag ::= open_switch_tag content_sequence case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // closing_switch_tag ::= begin_switch_tag default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // closing_switch_tag ::= begin_switch_tag content_sequence default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // closing_switch_tag ::= open_switch_tag default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // closing_switch_tag ::= open_switch_tag content_sequence default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_tag ::= TAG_LBRACE SWITCH TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("switch"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_tag ::= TAG_LBRACE SWITCH expr TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AlternatePathTag(new UnaryTag("switch",e,null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch_tag ::= begin_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switch_tag ::= begin_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // switch_tag ::= open_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // switch_tag ::= open_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // switch_tag ::= closing_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // switch_tag ::= closing_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // end_if_tag ::= TAG_END_LBRACE IF TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("if"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_if_tag",50, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // else_tag ::= TAG_LBRACE ELSE TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("else"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_tag",34, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // else_if_tag ::= TAG_LBRACE ELSE_IF TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("elseif"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_if_tag",33, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else_if_tag ::= TAG_LBRACE ELSE_IF expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("elseif",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_if_tag",33, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // begin_if_tag ::= TAG_LBRACE IF TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("if",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_if_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // begin_if_tag ::= TAG_LBRACE IF expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("if",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_if_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // open_if_tag ::= begin_if_tag else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // open_if_tag ::= begin_if_tag content_sequence else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // open_if_tag ::= open_if_tag else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // open_if_tag ::= open_if_tag content_sequence else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // closing_if_tag ::= begin_if_tag else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // closing_if_tag ::= begin_if_tag content_sequence else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // closing_if_tag ::= open_if_tag else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // closing_if_tag ::= open_if_tag content_sequence else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_tag ::= TAG_LBRACE IF TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("if"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if_tag ::= TAG_LBRACE IF expr TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AlternatePathTag(new UnaryTag("if",e,null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_tag ::= begin_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_tag ::= begin_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_tag ::= open_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_tag ::= open_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_tag ::= closing_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_tag ::= closing_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // end_let_tag ::= TAG_END_LBRACE LET TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("let"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_let_tag",49, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // begin_let_tag ::= TAG_LBRACE LET TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginLetTag(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_let_tag",40, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // begin_let_tag ::= TAG_LBRACE LET LET_IDENTIFIER TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginLetTag(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_let_tag",40, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // begin_let_tag ::= TAG_LBRACE LET LET_IDENTIFIER COLON expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginLetTag(id,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_let_tag",40, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // let_tag ::= TAG_LBRACE LET TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginLetTag(null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("let_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // let_tag ::= TAG_LBRACE LET LET_IDENTIFIER TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginLetTag(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("let_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // let_tag ::= TAG_LBRACE LET LET_IDENTIFIER COLON expr TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginLetTag(id,e),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("let_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // let_tag ::= begin_let_tag end_let_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("let_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // let_tag ::= begin_let_tag content_sequence end_let_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("let_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // end_msg_tag ::= TAG_END_LBRACE MSG TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("msg"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_msg_tag",48, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // begin_msg_tag ::= TAG_LBRACE MSG TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("msg",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_msg_tag",39, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // begin_msg_tag ::= TAG_LBRACE MSG attribute_list TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("msg",att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_msg_tag",39, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // msg_tag ::= TAG_LBRACE MSG TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new UnaryTag("msg")); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // msg_tag ::= begin_msg_tag end_msg_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // msg_tag ::= begin_msg_tag content_sequence end_msg_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print_tag ::= TAG_LBRACE PRINT_IMPLICIT expr directive_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag(null,e,null,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print_tag ::= TAG_LBRACE PRINT_IMPLICIT expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag(null,e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print_tag ::= TAG_LBRACE PRINT expr directive_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("print",e,null,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print_tag ::= TAG_LBRACE PRINT expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("print",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // end_literal_tag ::= TAG_END_LBRACE LITERAL TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("literal"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_literal_tag",47, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // begin_literal_tag ::= TAG_LBRACE LITERAL TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("literal",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_literal_tag",38, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal_tag ::= begin_literal_tag LITERAL_TEXT end_literal_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,ContentWrapper.create(new CapturedText(text))); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // end_template_tag ::= TAG_END_LBRACE TEMPLATE TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("template"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_template_tag",14, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // begin_template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION attribute_list TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(null,null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // begin_template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		 RESULT = new BeginTemplateTag(null,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // begin_template_tag ::= TAG_LBRACE TEMPLATE template_ident attribute_list TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(id,null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // begin_template_tag ::= TAG_LBRACE TEMPLATE template_ident TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(id,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginTemplateTag(null,null,null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",12, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // template_tag ::= begin_template_tag end_template_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTemplateTag b = (BeginTemplateTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",12, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // template_tag ::= begin_template_tag content_sequence end_template_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTemplateTag b = (BeginTemplateTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> c = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",12, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // template_doc_buffer ::= DOC_COMMENT_BEGIN 
            {
              SoyDocCommentBuffer RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 SoyDocCommentBuffer buf = new SoyDocCommentBuffer(); buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // template_doc_buffer ::= DOC_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 SoyDocCommentBuffer buf = new SoyDocCommentBuffer(); buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // template_doc_buffer ::= template_doc_buffer LINE_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_IDENTIFIER 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_PARAM_TAG 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_TAG 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_BEGIN 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_EOL 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // template_doc_comment ::= template_doc_buffer DOC_COMMENT_END 
            {
              TemplateDocComment RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateDocComment(buf); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_comment",8, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // template_def ::= template_tag 
            {
              TemplateDeclaration RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateDeclaration(null,tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_def",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // template_def ::= template_doc_comment template_tag 
            {
              TemplateDeclaration RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		TemplateDocComment doc = (TemplateDocComment)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateDeclaration(doc,tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_def",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // alias_tag ::= TAG_LBRACE ALIAS RBRACE_ERROR 
            {
              AliasDeclaration RESULT =null;
		 RESULT = new AliasDeclaration(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("alias_tag",6, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // alias_tag ::= TAG_LBRACE ALIAS NAMESPACE_IDENTIFIER TAG_RBRACE 
            {
              AliasDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AliasDeclaration(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("alias_tag",6, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // alias_list ::= alias_tag 
            {
              List<AliasDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AliasDeclaration a = (AliasDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<AliasDeclaration> l = new LinkedList<AliasDeclaration>(); l.add(a); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("alias_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // alias_list ::= alias_list alias_tag 
            {
              List<AliasDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<AliasDeclaration> l = (List<AliasDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AliasDeclaration a = (AliasDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(a); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("alias_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // alias_list ::= alias_list skip_element 
            {
              List<AliasDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<AliasDeclaration> l = (List<AliasDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("alias_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // namespace_def ::= TAG_LBRACE NAMESPACE RBRACE_ERROR 
            {
              NamespaceDeclaration RESULT =null;
		 RESULT = new NamespaceDeclaration(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // namespace_def ::= TAG_LBRACE NAMESPACE NAMESPACE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              NamespaceDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new NamespaceDeclaration(id, att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // namespace_def ::= TAG_LBRACE NAMESPACE NAMESPACE_IDENTIFIER TAG_RBRACE 
            {
              NamespaceDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new NamespaceDeclaration(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // non_content_tag ::= special_char_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		SpecialCharacterTag tag = (SpecialCharacterTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("non_content_tag",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // non_content_tag ::= print_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag tag = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("non_content_tag",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // content_tag ::= call_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateCall tag = (TemplateCall)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // content_tag ::= for_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // content_tag ::= foreach_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // content_tag ::= switch_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // content_tag ::= if_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // content_tag ::= msg_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // content_tag ::= literal_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // content_element ::= non_content_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > tag = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = tag; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // content_element ::= content_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > tag = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = tag; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // content_element ::= let_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // content_element ::= LINE_COMMENT 
            {
              ContentWrapper< ? > RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new Comment(c)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // content_element ::= COMMENT 
            {
              ContentWrapper< ? > RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new Comment(c)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // content_element ::= TEMPLATE_TEXT 
            {
              ContentWrapper< ? > RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new CapturedText(t)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // content_sequence ::= content_sequence content_element 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > e = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_sequence",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // content_sequence ::= content_element 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > e = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<ContentWrapper<?>> l = new LinkedList<ContentWrapper<?>>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_sequence",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // skip_element ::= IGNORED_TEXT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // skip_element ::= LINE_COMMENT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // skip_element ::= COMMENT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // skip_element_list ::= skip_element 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element_list",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // skip_element_list ::= skip_element_list skip_element 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element_list",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // template_list ::= template_def 
            {
              List<TemplateDeclaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateDeclaration t = (TemplateDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<TemplateDeclaration> l = new LinkedList<TemplateDeclaration>(); l.add(t); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // template_list ::= template_list template_def 
            {
              List<TemplateDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateDeclaration t = (TemplateDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(t); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // template_list ::= template_list skip_element 
            {
              List<TemplateDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // template_file ::= namespace_def alias_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<AliasDeclaration> a = (List<AliasDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,a,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // template_file ::= namespace_def skip_element_list alias_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<AliasDeclaration> a = (List<AliasDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,a,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // template_file ::= skip_element_list namespace_def alias_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<AliasDeclaration> a = (List<AliasDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,a,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // template_file ::= skip_element_list namespace_def skip_element_list alias_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<AliasDeclaration> a = (List<AliasDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,a,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // template_file ::= namespace_def template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // template_file ::= namespace_def skip_element_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // template_file ::= skip_element_list namespace_def template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= template_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		TemplateFile start_val = (TemplateFile)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		RESULT = start_val;
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SoyParser$parser.done_parsing();
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // template_file ::= skip_element_list namespace_def skip_element_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

